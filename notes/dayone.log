Python 2.7.5 (v2.7.5:ab05e7dd2788, May 13 2013, 13:18:45) 
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type "copyright", "credits" or "license()" for more information.
>>> # How to use IDLE
>>> print 'Hello World'
Hello World
>>> print '''Hello World
print goodbye'''
Hello World
print goodbye
>>> pow(2, 5)
32
>>> 30 + 40
70
>>> for i in range(10):
	print i, i*i

	
0 0
1 1
2 4
3 9
4 16
5 25
6 36
7 49
8 64
9 81
>>> 'hello' + 'world'
'helloworld'
>>> 
>>> # Alt-Prev Alt-Next
>>> pow(2, 7)
128
>>> KeyError
<type 'exceptions.KeyError'>
>>> 
>>> 

>>> ================================ RESTART ================================
>>> 
70
0 0
1 1
2 4
3 9
4 16
5 25
6 36
7 49
8 64
9 81
>>> x
10
>>> ================================ RESTART ================================
>>> 
70
0 0
1 1
2 4
3 9
4 16
5 25
6 36
7 49
8 64
9 81
>>> ================================ RESTART ================================
>>> x

Traceback (most recent call last):
  File "<pyshell#17>", line 1, in <module>
    x
NameError: name 'x' is not defined
>>> pow(2, 7)
128
>>> import hello
70
0 0
1 1
2 4
3 9
4 16
5 25
6 36
7 49
8 64
9 81
>>> ================================ RESTART ================================
>>> 
=============================== Source: http://dl.dropbox.com/u/3967849/sj57/links.txt ==============================
                                    Starting download at Mon Aug 19 12:29:26 2013                                    
304  Not Modified     http://dl.dropbox.com/u/3967849/sj57/links.txt
304  Not Modified     http://dl.dropbox.com/u/3967849/shared/banner.py
304  Not Modified     http://dl.dropbox.com/u/3967849/shared/spelling.py
304  Not Modified     http://dl.dropbox.com/u/3967849/sj57/dayfour.log
304  Not Modified     http://dl.dropbox.com/u/3967849/shared/publish.py
304  Not Modified     http://dl.dropbox.com/u/3967849/sj57/call_by_object.txt
304  Not Modified     http://dl.dropbox.com/u/3967849/shared/stocks.txt
304  Not Modified     http://dl.dropbox.com/u/3967849/shared/pexpect.py
304  Not Modified     http://dl.dropbox.com/u/3967849/shared/ipv4_int_bri.txt
304  Not Modified     http://dl.dropbox.com/u/3967849/shared/__init__.py
304  Not Modified     http://dl.dropbox.com/u/3967849/shared/picirc.py
304  Not Modified     http://dl.dropbox.com/u/3967849/sj57/daytwo.log
304  Not Modified     http://dl.dropbox.com/u/3967849/shared/PythonAwesome.pdf
304  Not Modified     http://dl.dropbox.com/u/3967849/shared/books.xml
304  Not Modified     http://dl.dropbox.com/u/3967849/sj57/daythree.log
304  Not Modified     http://dl.dropbox.com/u/3967849/shared/show_controllers.txt
304  Not Modified     http://dl.dropbox.com/u/3967849/shared/raisin_team.csv
304  Not Modified     http://dl.dropbox.com/u/3967849/shared/books.json
304  Not Modified     http://dl.dropbox.com/u/3967849/shared/islands.pdf
304  Not Modified     http://dl.dropbox.com/u/3967849/shared/BeautifulSoup.py
304  Not Modified     http://dl.dropbox.com/u/3967849/shared/email.txt
304  Not Modified     http://dl.dropbox.com/u/3967849/shared/IntroPython.pdf
200  OK               http://dl.dropbox.com/u/3967849/sj57/dayone.log         --> notes/dayone.log          (updated) 
304  Not Modified     http://dl.dropbox.com/u/3967849/shared/highlight.py
304  Not Modified     http://dl.dropbox.com/u/3967849/shared/big.txt
>>> ================================ RESTART ================================
>>> 
70
0 0
1 1
2 4
3 9
4 16
5 25
6 36
7 49
8 64
9 81
10 100
11 121
12 144
13 169
14 196
>>> 
>>> # Let's go eat
>>> # Skeet
>>> 
>>> s = 'hello'
>>> i = 1
>>> s[i]
'e'
>>> i = 10
>>> s[i]

Traceback (most recent call last):
  File "<pyshell#28>", line 1, in <module>
    s[i]
IndexError: string index out of range
>>> try:
	print s[i]
except IndexError:
	print 'Oops, I did it again.'

	
Oops, I did it again.
>>> try:
	print s[i]
except IndexError:
	print 'default'

	
default
>>> ================================ RESTART ================================
>>> 
>>> lines

Traceback (most recent call last):
  File "<pyshell#36>", line 1, in <module>
    lines
NameError: name 'lines' is not defined
>>> line
'Raymond,Hettinger,VP of Raisin Smushing,raymond@example.com,(606) 555-1212'
>>> fields
['Raymond,Hettinger,VP', 'of', 'Raisin', 'Smushing,raymond@example.com,(606)', '555-1212']
>>> type(fields)
<type 'list'>
>>> fields[0]
'Raymond,Hettinger,VP'
>>> fields[1]
'of'
>>> fields[2]
'Raisin'
>>> ================================ RESTART ================================
>>> 
>>> fields
['Raymond', 'Hettinger', 'VP of Raisin Smushing', 'raymond@example.com', '(606) 555-1212']
>>> ================================ RESTART ================================
>>> 
>>> 
>>> ================================ RESTART ================================
>>> 
>>> print 'The answer is %s today' % 10
The answer is 10 today
>>> # string interpolation
>>> ================================ RESTART ================================
>>> 
BEGIN:VCARD
VERSION:2.1
N:Gump;Forrest
FN:Forrest Gump
ORG:Bubba Gump Shrimp Co.
TITLE:Shrimp Man
PHOTO;GIF:http://www.example.com/dir_photos/my_photo.gif
TEL;WORK;VOICE:(111) 555-1212
TEL;HOME;VOICE:(404) 555-1212
ADR;WORK:;;100 Waters Edge;Baytown;LA;30314;United States of America
LABEL;WORK;ENCODING=QUOTED-PRINTABLE:100 Waters Edge=0D=0ABaytown, LA 30314=0D=0AUnited States of America
ADR;HOME:;;42 Plantation St.;Baytown;LA;30314;United States of America
LABEL;HOME;ENCODING=QUOTED-PRINTABLE:42 Plantation St.=0D=0ABaytown, LA 30314=0D=0AUnited States of America
EMAIL;PREF;INTERNET:forrestgump@example.com
REV:20080424T195243Z
END:VCARD

>>> ================================ RESTART ================================
>>> 
BEGIN:VCARD
VERSION:2.1
N:%s;%s
FN:%s %s
ORG:Raisins R Us, Inc.
TITLE:%s
TEL;WORK;VOICE:%s
ADR;WORK:;;100 Raisin Dr;Fresno;CA;96000;United States of America
EMAIL;PREF;INTERNET:%s
REV:201308219T195243Z
END:VCARD

>>> 32 / 6
5
>>> 32 % 6
2
>>> divmod(32, 6)                    # gazinta
(5, 2)
>>> 
>>> 
>>> 2 + 3 * 5
17
>>> print 'The answer is %s today' % 10
The answer is 10 today
>>> print 'The answer is %s today' % 2 ** 5
The answer is 32 today
>>> print 'The answer is %s today' % 2 * 5
The answer is 2 todayThe answer is 2 todayThe answer is 2 todayThe answer is 2 todayThe answer is 2 today
>>> print ('The answer is %s today' % 2) * 5
The answer is 2 todayThe answer is 2 todayThe answer is 2 todayThe answer is 2 todayThe answer is 2 today
>>> print 'The answer is %s today' % (2 * 5)
The answer is 10 today
>>> ================================ RESTART ================================
>>> 
BEGIN:VCARD
VERSION:2.1
N:Hettinger;Raymond
FN:Raymond Hettinger
ORG:Raisins R Us, Inc.
TITLE:VP of Raisin Smushing
TEL;WORK;VOICE:(606) 555-1212
ADR;WORK:;;100 Raisin Dr;Fresno;CA;96000;United States of America
EMAIL;PREF;INTERNET:raymond@example.com
REV:201308219T195243Z
END:VCARD

>>> 32 / 6
5
>>> 32.0 / 6.0
5.333333333333333
>>> 32 / 6.0
5.333333333333333
>>> (int / int) -> int
SyntaxError: invalid syntax
>>> # float / int     or int / float   --> float / float -> float
>>> 
>>> 
>>> 32 / 6
5
>>> def average(seq):
	'Compute the arithmetic mean of a sequence'
	return sum(seq) / len(seq)

>>> average([10, 20, 60])
30
>>> 
>>> average([10, 20, 61])
30
>>> 91 / 3
30
>>> def average(seq):
	'Compute the arithmetic mean of a sequence'
	return sum(seq) / len(seq)

>>> def average(seq):
	'Compute the arithmetic mean of a sequence'
	return sum(seq) / (len(seq) + 0.0)

>>> average([10, 20, 61])
30.333333333333332
>>> def average(seq):
	'Compute the arithmetic mean of a sequence'
	return sum(seq) / float(len(seq))

>>> average([10, 20, 61])
30.333333333333332
>>> 
>>> 
>>> 
>>> 3.0 > 2.7
True
>>> from __future__ import division
>>> 32 / 6
5.333333333333333
>>> def average(seq):
	'Compute the arithmetic mean of a sequence'
	return sum(seq) / len(seq)

>>> average([10, 20, 61])
30.333333333333332
>>> ================================ RESTART ================================
>>> dir(__builtins__)
['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException', 'BufferError', 'BytesWarning', 'DeprecationWarning', 'EOFError', 'Ellipsis', 'EnvironmentError', 'Exception', 'False', 'FloatingPointError', 'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError', 'ImportWarning', 'IndentationError', 'IndexError', 'KeyError', 'KeyboardInterrupt', 'LookupError', 'MemoryError', 'NameError', 'None', 'NotImplemented', 'NotImplementedError', 'OSError', 'OverflowError', 'PendingDeprecationWarning', 'ReferenceError', 'RuntimeError', 'RuntimeWarning', 'StandardError', 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError', 'SystemExit', 'TabError', 'True', 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError', 'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning', 'ValueError', 'Warning', 'ZeroDivisionError', '__debug__', '__doc__', '__import__', '__name__', '__package__', 'abs', 'all', 'any', 'apply', 'basestring', 'bin', 'bool', 'buffer', 'bytearray', 'bytes', 'callable', 'chr', 'classmethod', 'cmp', 'coerce', 'compile', 'complex', 'copyright', 'credits', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'execfile', 'exit', 'file', 'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr', 'hash', 'help', 'hex', 'id', 'input', 'int', 'intern', 'isinstance', 'issubclass', 'iter', 'len', 'license', 'list', 'locals', 'long', 'map', 'max', 'memoryview', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property', 'quit', 'range', 'raw_input', 'reduce', 'reload', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'unichr', 'unicode', 'vars', 'xrange', 'zip']
>>> ================================ RESTART ================================
>>> 
BEGIN:VCARD
VERSION:2.1
N:Hettinger;Raymond
FN:Raymond Hettinger
ORG:Raisins R Us, Inc.
TITLE:VP of Raisin Smushing
TEL;WORK;VOICE:(606) 555-1212
ADR;WORK:;;100 Raisin Dr;Fresno;CA;96000;United States of America
EMAIL;PREF;INTERNET:raymond@example.com
REV:201308219T195243Z
END:VCARD

>>> ================================ RESTART ================================
>>> 
>>> ================================ RESTART ================================
>>> 
>>> filename
'Raymond_Hettinger.vcard'
>>> ================================ RESTART ================================
>>> 
>>> filename
'Raymond_Hettinger.vcard'
>>> import qr

Traceback (most recent call last):
  File "<pyshell#94>", line 1, in <module>
    import qr
ImportError: No module named qr
>>> ================================ RESTART ================================
>>> 
>>> link
'http://example.com/vcard/Raymond_Hettinger.vcard'
>>> ================================ RESTART ================================
>>> 
>>> urllib.urlencode({'fun guy': 'Raymond Hettinger'})
'fun+guy=Raymond+Hettinger'
>>> urllib.urlencode({'chl': 'http://example.com/vcard/Raymond_Hettinger.vcard'})
'chl=http%3A%2F%2Fexample.com%2Fvcard%2FRaymond_Hettinger.vcard'
>>> ================================ RESTART ================================
>>> 
>>> quoted_link
'chl=http%3A%2F%2Fexample.com%2Fvcard%2FRaymond_Hettinger.vcard'
>>> ================================ RESTART ================================
>>> 
>>> qr_url
'https://chart.googleapis.com/chart?chs=250x250&cht=qr&chl=http%3A%2F%2Fexample.com%2Fvcard%2FRaymond_Hettinger.vcard'
>>> ================================ RESTART ================================
>>> 
>>> qr_url
'https://chart.googleapis.com/chart?chs=300x300&cht=qr&chl=http%3A%2F%2Fexample.com%2Fvcard%2FRaymond_Hettinger.vcard'
>>> ================================ RESTART ================================
>>> 
>>> ================================ RESTART ================================
>>> 
Hettinger,Raymond,VP Raisin Smushing,raymond@example.com,559-555-1212

Thomas,Mary,Sr. Associate Raisin Design,mary@example,559-555-2300

Davis,Harold,Chief Raisin Picker,harold@example,559-555-2318

Masterson,Martin,Asst Raisin Smusher,martin@example,559-555-2348

Jones,David,Grape Ager,david@example,559-555-2379

Zapata,Luis,VP Grape Sales,luis@example,559-555-2301

Gunter,Fritz,Grape Smusher,fritz@example,559-555-2333

Pichon,Esmerela,Head Raisin Counter,esmerelda@example,559-555-2397

Blain,Marilyn,Raisin Packager,marilyn@example,559-555-6565

Marks,Blair,VP Investor Relations,blair@example,559-555-6513

Schmidt,Gertrude,VP Business Development,gertrude@example,559-555-6700

>>> ================================ RESTART ================================
>>> 
>>> https://chart.googleapis.com/chart?chs=300x300&cht=qr&chl=http%3A%2F%2Fexample.com%2Fvcard%2FRaymond_Hettinger.vcard
SyntaxError: invalid syntax
>>> 
>>> 
>>> 
>>> 
>>> # string theory    number theory
>>> 
>>> 
>>> 
>>> # strippers  casers   aligners  torn-and-restored
>>> 
>>> s = '   hello   '
>>> s.strip()
'hello'
>>> s.rstrip()
'   hello'
>>> s.lstrip()
'hello   '
>>> 
>>> 
>>> s = 'the tale of two cities'
>>> s.upper()
'THE TALE OF TWO CITIES'
>>> s.lower()
'the tale of two cities'
>>> s.title()
'The Tale Of Two Cities'
>>> s.capitalize()
'The tale of two cities'
>>> 
>>> "le'Espalier".title()
"Le'Espalier"
>>> "l'Espalier".title()
"L'Espalier"
>>> 
>>> 
>>> "Don't you forget about me".title()
"Don'T You Forget About Me"
>>> 
>>> 
>>> # Strings are immutable ; read-only ; unchangeable
>>> 
>>> s
'the tale of two cities'
>>> s.upper()
'THE TALE OF TWO CITIES'
>>> s
'the tale of two cities'
>>> s.capitalize()
'The tale of two cities'
>>> 
>>> 
>>> print s
the tale of two cities
>>> t = s.capitalize()
>>> s
'the tale of two cities'
>>> t
'The tale of two cities'
>>> 
>>> 
>>> s.upper().title()
'The Tale Of Two Cities'
>>> s.title().swapcase()
'tHE tALE oF tWO cITIES'
>>> 
>>> 
>>> dir(s)
['__add__', '__class__', '__contains__', '__delattr__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getslice__', '__gt__', '__hash__', '__init__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '_formatter_field_name_split', '_formatter_parser', 'capitalize', 'center', 'count', 'decode', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'index', 'isalnum', 'isalpha', 'isdigit', 'islower', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']
>>> 
>>> help(str)
Help on class str in module __builtin__:

class str(basestring)
 |  str(object='') -> string
 |  
 |  Return a nice string representation of the object.
 |  If the argument is a string, the return value is the same object.
 |  
 |  Method resolution order:
 |      str
 |      basestring
 |      object
 |  
 |  Methods defined here:
 |  
 |  __add__(...)
 |      x.__add__(y) <==> x+y
 |  
 |  __contains__(...)
 |      x.__contains__(y) <==> y in x
 |  
 |  __eq__(...)
 |      x.__eq__(y) <==> x==y
 |  
 |  __format__(...)
 |      S.__format__(format_spec) -> string
 |      
 |      Return a formatted version of S as described by format_spec.
 |  
 |  __ge__(...)
 |      x.__ge__(y) <==> x>=y
 |  
 |  __getattribute__(...)
 |      x.__getattribute__('name') <==> x.name
 |  
 |  __getitem__(...)
 |      x.__getitem__(y) <==> x[y]
 |  
 |  __getnewargs__(...)
 |  
 |  __getslice__(...)
 |      x.__getslice__(i, j) <==> x[i:j]
 |      
 |      Use of negative indices is not supported.
 |  
 |  __gt__(...)
 |      x.__gt__(y) <==> x>y
 |  
 |  __hash__(...)
 |      x.__hash__() <==> hash(x)
 |  
 |  __le__(...)
 |      x.__le__(y) <==> x<=y
 |  
 |  __len__(...)
 |      x.__len__() <==> len(x)
 |  
 |  __lt__(...)
 |      x.__lt__(y) <==> x<y
 |  
 |  __mod__(...)
 |      x.__mod__(y) <==> x%y
 |  
 |  __mul__(...)
 |      x.__mul__(n) <==> x*n
 |  
 |  __ne__(...)
 |      x.__ne__(y) <==> x!=y
 |  
 |  __repr__(...)
 |      x.__repr__() <==> repr(x)
 |  
 |  __rmod__(...)
 |      x.__rmod__(y) <==> y%x
 |  
 |  __rmul__(...)
 |      x.__rmul__(n) <==> n*x
 |  
 |  __sizeof__(...)
 |      S.__sizeof__() -> size of S in memory, in bytes
 |  
 |  __str__(...)
 |      x.__str__() <==> str(x)
 |  
 |  capitalize(...)
 |      S.capitalize() -> string
 |      
 |      Return a copy of the string S with only its first character
 |      capitalized.
 |  
 |  center(...)
 |      S.center(width[, fillchar]) -> string
 |      
 |      Return S centered in a string of length width. Padding is
 |      done using the specified fill character (default is a space)
 |  
 |  count(...)
 |      S.count(sub[, start[, end]]) -> int
 |      
 |      Return the number of non-overlapping occurrences of substring sub in
 |      string S[start:end].  Optional arguments start and end are interpreted
 |      as in slice notation.
 |  
 |  decode(...)
 |      S.decode([encoding[,errors]]) -> object
 |      
 |      Decodes S using the codec registered for encoding. encoding defaults
 |      to the default encoding. errors may be given to set a different error
 |      handling scheme. Default is 'strict' meaning that encoding errors raise
 |      a UnicodeDecodeError. Other possible values are 'ignore' and 'replace'
 |      as well as any other name registered with codecs.register_error that is
 |      able to handle UnicodeDecodeErrors.
 |  
 |  encode(...)
 |      S.encode([encoding[,errors]]) -> object
 |      
 |      Encodes S using the codec registered for encoding. encoding defaults
 |      to the default encoding. errors may be given to set a different error
 |      handling scheme. Default is 'strict' meaning that encoding errors raise
 |      a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and
 |      'xmlcharrefreplace' as well as any other name registered with
 |      codecs.register_error that is able to handle UnicodeEncodeErrors.
 |  
 |  endswith(...)
 |      S.endswith(suffix[, start[, end]]) -> bool
 |      
 |      Return True if S ends with the specified suffix, False otherwise.
 |      With optional start, test S beginning at that position.
 |      With optional end, stop comparing S at that position.
 |      suffix can also be a tuple of strings to try.
 |  
 |  expandtabs(...)
 |      S.expandtabs([tabsize]) -> string
 |      
 |      Return a copy of S where all tab characters are expanded using spaces.
 |      If tabsize is not given, a tab size of 8 characters is assumed.
 |  
 |  find(...)
 |      S.find(sub [,start [,end]]) -> int
 |      
 |      Return the lowest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Return -1 on failure.
 |  
 |  format(...)
 |      S.format(*args, **kwargs) -> string
 |      
 |      Return a formatted version of S, using substitutions from args and kwargs.
 |      The substitutions are identified by braces ('{' and '}').
 |  
 |  index(...)
 |      S.index(sub [,start [,end]]) -> int
 |      
 |      Like S.find() but raise ValueError when the substring is not found.
 |  
 |  isalnum(...)
 |      S.isalnum() -> bool
 |      
 |      Return True if all characters in S are alphanumeric
 |      and there is at least one character in S, False otherwise.
 |  
 |  isalpha(...)
 |      S.isalpha() -> bool
 |      
 |      Return True if all characters in S are alphabetic
 |      and there is at least one character in S, False otherwise.
 |  
 |  isdigit(...)
 |      S.isdigit() -> bool
 |      
 |      Return True if all characters in S are digits
 |      and there is at least one character in S, False otherwise.
 |  
 |  islower(...)
 |      S.islower() -> bool
 |      
 |      Return True if all cased characters in S are lowercase and there is
 |      at least one cased character in S, False otherwise.
 |  
 |  isspace(...)
 |      S.isspace() -> bool
 |      
 |      Return True if all characters in S are whitespace
 |      and there is at least one character in S, False otherwise.
 |  
 |  istitle(...)
 |      S.istitle() -> bool
 |      
 |      Return True if S is a titlecased string and there is at least one
 |      character in S, i.e. uppercase characters may only follow uncased
 |      characters and lowercase characters only cased ones. Return False
 |      otherwise.
 |  
 |  isupper(...)
 |      S.isupper() -> bool
 |      
 |      Return True if all cased characters in S are uppercase and there is
 |      at least one cased character in S, False otherwise.
 |  
 |  join(...)
 |      S.join(iterable) -> string
 |      
 |      Return a string which is the concatenation of the strings in the
 |      iterable.  The separator between elements is S.
 |  
 |  ljust(...)
 |      S.ljust(width[, fillchar]) -> string
 |      
 |      Return S left-justified in a string of length width. Padding is
 |      done using the specified fill character (default is a space).
 |  
 |  lower(...)
 |      S.lower() -> string
 |      
 |      Return a copy of the string S converted to lowercase.
 |  
 |  lstrip(...)
 |      S.lstrip([chars]) -> string or unicode
 |      
 |      Return a copy of the string S with leading whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |      If chars is unicode, S will be converted to unicode before stripping
 |  
 |  partition(...)
 |      S.partition(sep) -> (head, sep, tail)
 |      
 |      Search for the separator sep in S, and return the part before it,
 |      the separator itself, and the part after it.  If the separator is not
 |      found, return S and two empty strings.
 |  
 |  replace(...)
 |      S.replace(old, new[, count]) -> string
 |      
 |      Return a copy of string S with all occurrences of substring
 |      old replaced by new.  If the optional argument count is
 |      given, only the first count occurrences are replaced.
 |  
 |  rfind(...)
 |      S.rfind(sub [,start [,end]]) -> int
 |      
 |      Return the highest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Return -1 on failure.
 |  
 |  rindex(...)
 |      S.rindex(sub [,start [,end]]) -> int
 |      
 |      Like S.rfind() but raise ValueError when the substring is not found.
 |  
 |  rjust(...)
 |      S.rjust(width[, fillchar]) -> string
 |      
 |      Return S right-justified in a string of length width. Padding is
 |      done using the specified fill character (default is a space)
 |  
 |  rpartition(...)
 |      S.rpartition(sep) -> (head, sep, tail)
 |      
 |      Search for the separator sep in S, starting at the end of S, and return
 |      the part before it, the separator itself, and the part after it.  If the
 |      separator is not found, return two empty strings and S.
 |  
 |  rsplit(...)
 |      S.rsplit([sep [,maxsplit]]) -> list of strings
 |      
 |      Return a list of the words in the string S, using sep as the
 |      delimiter string, starting at the end of the string and working
 |      to the front.  If maxsplit is given, at most maxsplit splits are
 |      done. If sep is not specified or is None, any whitespace string
 |      is a separator.
 |  
 |  rstrip(...)
 |      S.rstrip([chars]) -> string or unicode
 |      
 |      Return a copy of the string S with trailing whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |      If chars is unicode, S will be converted to unicode before stripping
 |  
 |  split(...)
 |      S.split([sep [,maxsplit]]) -> list of strings
 |      
 |      Return a list of the words in the string S, using sep as the
 |      delimiter string.  If maxsplit is given, at most maxsplit
 |      splits are done. If sep is not specified or is None, any
 |      whitespace string is a separator and empty strings are removed
 |      from the result.
 |  
 |  splitlines(...)
 |      S.splitlines(keepends=False) -> list of strings
 |      
 |      Return a list of the lines in S, breaking at line boundaries.
 |      Line breaks are not included in the resulting list unless keepends
 |      is given and true.
 |  
 |  startswith(...)
 |      S.startswith(prefix[, start[, end]]) -> bool
 |      
 |      Return True if S starts with the specified prefix, False otherwise.
 |      With optional start, test S beginning at that position.
 |      With optional end, stop comparing S at that position.
 |      prefix can also be a tuple of strings to try.
 |  
 |  strip(...)
 |      S.strip([chars]) -> string or unicode
 |      
 |      Return a copy of the string S with leading and trailing
 |      whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |      If chars is unicode, S will be converted to unicode before stripping
 |  
 |  swapcase(...)
 |      S.swapcase() -> string
 |      
 |      Return a copy of the string S with uppercase characters
 |      converted to lowercase and vice versa.
 |  
 |  title(...)
 |      S.title() -> string
 |      
 |      Return a titlecased version of S, i.e. words start with uppercase
 |      characters, all remaining cased characters have lowercase.
 |  
 |  translate(...)
 |      S.translate(table [,deletechars]) -> string
 |      
 |      Return a copy of the string S, where all characters occurring
 |      in the optional argument deletechars are removed, and the
 |      remaining characters have been mapped through the given
 |      translation table, which must be a string of length 256 or None.
 |      If the table argument is None, no translation is applied and
 |      the operation simply removes the characters in deletechars.
 |  
 |  upper(...)
 |      S.upper() -> string
 |      
 |      Return a copy of the string S converted to uppercase.
 |  
 |  zfill(...)
 |      S.zfill(width) -> string
 |      
 |      Pad a numeric string S with zeros on the left, to fill a field
 |      of the specified width.  The string S is never truncated.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __new__ = <built-in method __new__ of type object>
 |      T.__new__(S, ...) -> a new object with type S, a subtype of T

>>> type(s)
<type 'str'>
>>> 
>>> s = 'hello'
>>> s.center(50)
'                      hello                       '
>>> s.ljust(50)
'hello                                             '
>>> s.rjust(50)
'                                             hello'
>>> 
>>> # ljust / rjust / center
>>> 
>>> 
>>> 
>>> s = 'the tale of two cities'
>>> s.split()
['the', 'tale', 'of', 'two', 'cities']
>>> s.split(',')
['the tale of two cities']
>>> s.split('e')
['th', ' tal', ' of two citi', 's']
>>> s
'the tale of two cities'
>>> 
>>> s = 'the tale of two cities'
>>> t = s.split()
>>> 
>>> type(t)
<type 'list'>
>>> dir(t)
['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__delslice__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getslice__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__setslice__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']
>>> 
>>> 
>>> # joiner.JOIN(the list of thing being joined)
>>> # mortar.join(bricks)
>>> 
>>> s = 'the tale of two cities'
>>> t = s.split()
>>> t
['the', 'tale', 'of', 'two', 'cities']
>>> 
>>> ''.join(t)
'thetaleoftwocities'
>>> print '\t'.join(t)
the	tale	of	two	cities
>>> print '\n'.join(t)
the
tale
of
two
cities
>>> print ', '.join(t)
the, tale, of, two, cities
>>> print '_'.join(t)
the_tale_of_two_cities
>>> print ' <---> '.join(t)
the <---> tale <---> of <---> two <---> cities
>>> 
>>> s
'the tale of two cities'
>>> s.replace('two', 'three')
'the tale of three cities'
>>> s
'the tale of two cities'
>>> 
>>> 
>>> 30 + 40
70
>>> 3 + 3 + 3 + 3 + 3
15
>>> 3 * 5
15
>>> 2 + 3 * 4
14
>>> 
>>> 'hello' + ' world'
'hello world'
>>> 'x' + 'x' + 'x' + 'x' + 'x'
'xxxxx'
>>> 'x' * 5
'xxxxx'
>>> 2 + 3 * 4
14
>>> 'x' + 'y' * 5
'xyyyyy'
>>> print '=' * 20 + ' The Tale of Two Cities ' + '=' * 20
==================== The Tale of Two Cities ====================
>>> [10] + [20, 30]
[10, 20, 30]
>>> [10] + [10] + [10] + [10] + [10]
[10, 10, 10, 10, 10]
>>> [10] * 5
[10, 10, 10, 10, 10]
>>> array = [0] * 50
>>> array
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
>>> 
>>> 
>>> 
>>> 
>>> s = [10, 20, 30]
>>> type(s)
<type 'list'>
>>> dir(s)
['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__delslice__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getslice__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__setslice__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']
>>> help(list)
Help on class list in module __builtin__:

class list(object)
 |  list() -> new empty list
 |  list(iterable) -> new list initialized from iterable's items
 |  
 |  Methods defined here:
 |  
 |  __add__(...)
 |      x.__add__(y) <==> x+y
 |  
 |  __contains__(...)
 |      x.__contains__(y) <==> y in x
 |  
 |  __delitem__(...)
 |      x.__delitem__(y) <==> del x[y]
 |  
 |  __delslice__(...)
 |      x.__delslice__(i, j) <==> del x[i:j]
 |      
 |      Use of negative indices is not supported.
 |  
 |  __eq__(...)
 |      x.__eq__(y) <==> x==y
 |  
 |  __ge__(...)
 |      x.__ge__(y) <==> x>=y
 |  
 |  __getattribute__(...)
 |      x.__getattribute__('name') <==> x.name
 |  
 |  __getitem__(...)
 |      x.__getitem__(y) <==> x[y]
 |  
 |  __getslice__(...)
 |      x.__getslice__(i, j) <==> x[i:j]
 |      
 |      Use of negative indices is not supported.
 |  
 |  __gt__(...)
 |      x.__gt__(y) <==> x>y
 |  
 |  __iadd__(...)
 |      x.__iadd__(y) <==> x+=y
 |  
 |  __imul__(...)
 |      x.__imul__(y) <==> x*=y
 |  
 |  __init__(...)
 |      x.__init__(...) initializes x; see help(type(x)) for signature
 |  
 |  __iter__(...)
 |      x.__iter__() <==> iter(x)
 |  
 |  __le__(...)
 |      x.__le__(y) <==> x<=y
 |  
 |  __len__(...)
 |      x.__len__() <==> len(x)
 |  
 |  __lt__(...)
 |      x.__lt__(y) <==> x<y
 |  
 |  __mul__(...)
 |      x.__mul__(n) <==> x*n
 |  
 |  __ne__(...)
 |      x.__ne__(y) <==> x!=y
 |  
 |  __repr__(...)
 |      x.__repr__() <==> repr(x)
 |  
 |  __reversed__(...)
 |      L.__reversed__() -- return a reverse iterator over the list
 |  
 |  __rmul__(...)
 |      x.__rmul__(n) <==> n*x
 |  
 |  __setitem__(...)
 |      x.__setitem__(i, y) <==> x[i]=y
 |  
 |  __setslice__(...)
 |      x.__setslice__(i, j, y) <==> x[i:j]=y
 |      
 |      Use  of negative indices is not supported.
 |  
 |  __sizeof__(...)
 |      L.__sizeof__() -- size of L in memory, in bytes
 |  
 |  append(...)
 |      L.append(object) -- append object to end
 |  
 |  count(...)
 |      L.count(value) -> integer -- return number of occurrences of value
 |  
 |  extend(...)
 |      L.extend(iterable) -- extend list by appending elements from the iterable
 |  
 |  index(...)
 |      L.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
 |  
 |  insert(...)
 |      L.insert(index, object) -- insert object before index
 |  
 |  pop(...)
 |      L.pop([index]) -> item -- remove and return item at index (default last).
 |      Raises IndexError if list is empty or index is out of range.
 |  
 |  remove(...)
 |      L.remove(value) -- remove first occurrence of value.
 |      Raises ValueError if the value is not present.
 |  
 |  reverse(...)
 |      L.reverse() -- reverse *IN PLACE*
 |  
 |  sort(...)
 |      L.sort(cmp=None, key=None, reverse=False) -- stable sort *IN PLACE*;
 |      cmp(x, y) -> -1, 0, 1
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __hash__ = None
 |  
 |  __new__ = <built-in method __new__ of type object>
 |      T.__new__(S, ...) -> a new object with type S, a subtype of T

>>> 2 ** 5
32
>>> 2 ^ 5
7
>>> 2 ** 5
32
>>> 2 ^ 5
7
>>> 
>>> type(str)
<type 'type'>
>>> t
['the', 'tale', 'of', 'two', 'cities']
>>> 
>>> s = 'hello'
>>> t = 10
>>> dir(s)
['__add__', '__class__', '__contains__', '__delattr__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getslice__', '__gt__', '__hash__', '__init__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '_formatter_field_name_split', '_formatter_parser', 'capitalize', 'center', 'count', 'decode', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'index', 'isalnum', 'isalpha', 'isdigit', 'islower', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']
>>> dir(t)
['__abs__', '__add__', '__and__', '__class__', '__cmp__', '__coerce__', '__delattr__', '__div__', '__divmod__', '__doc__', '__float__', '__floordiv__', '__format__', '__getattribute__', '__getnewargs__', '__hash__', '__hex__', '__index__', '__init__', '__int__', '__invert__', '__long__', '__lshift__', '__mod__', '__mul__', '__neg__', '__new__', '__nonzero__', '__oct__', '__or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rdiv__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__ror__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__setattr__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', '__truediv__', '__trunc__', '__xor__', 'bit_length', 'conjugate', 'denominator', 'imag', 'numerator', 'real']
>>> help(t)
Help on int object:

class int(object)
 |  int(x=0) -> int or long
 |  int(x, base=10) -> int or long
 |  
 |  Convert a number or string to an integer, or return 0 if no arguments
 |  are given.  If x is floating point, the conversion truncates towards zero.
 |  If x is outside the integer range, the function returns a long instead.
 |  
 |  If x is not a number or if base is given, then x must be a string or
 |  Unicode object representing an integer literal in the given base.  The
 |  literal can be preceded by '+' or '-' and be surrounded by whitespace.
 |  The base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to
 |  interpret the base from the string as an integer literal.
 |  >>> int('0b100', base=0)
 |  4
 |  
 |  Methods defined here:
 |  
 |  __abs__(...)
 |      x.__abs__() <==> abs(x)
 |  
 |  __add__(...)
 |      x.__add__(y) <==> x+y
 |  
 |  __and__(...)
 |      x.__and__(y) <==> x&y
 |  
 |  __cmp__(...)
 |      x.__cmp__(y) <==> cmp(x,y)
 |  
 |  __coerce__(...)
 |      x.__coerce__(y) <==> coerce(x, y)
 |  
 |  __div__(...)
 |      x.__div__(y) <==> x/y
 |  
 |  __divmod__(...)
 |      x.__divmod__(y) <==> divmod(x, y)
 |  
 |  __float__(...)
 |      x.__float__() <==> float(x)
 |  
 |  __floordiv__(...)
 |      x.__floordiv__(y) <==> x//y
 |  
 |  __format__(...)
 |  
 |  __getattribute__(...)
 |      x.__getattribute__('name') <==> x.name
 |  
 |  __getnewargs__(...)
 |  
 |  __hash__(...)
 |      x.__hash__() <==> hash(x)
 |  
 |  __hex__(...)
 |      x.__hex__() <==> hex(x)
 |  
 |  __index__(...)
 |      x[y:z] <==> x[y.__index__():z.__index__()]
 |  
 |  __int__(...)
 |      x.__int__() <==> int(x)
 |  
 |  __invert__(...)
 |      x.__invert__() <==> ~x
 |  
 |  __long__(...)
 |      x.__long__() <==> long(x)
 |  
 |  __lshift__(...)
 |      x.__lshift__(y) <==> x<<y
 |  
 |  __mod__(...)
 |      x.__mod__(y) <==> x%y
 |  
 |  __mul__(...)
 |      x.__mul__(y) <==> x*y
 |  
 |  __neg__(...)
 |      x.__neg__() <==> -x
 |  
 |  __nonzero__(...)
 |      x.__nonzero__() <==> x != 0
 |  
 |  __oct__(...)
 |      x.__oct__() <==> oct(x)
 |  
 |  __or__(...)
 |      x.__or__(y) <==> x|y
 |  
 |  __pos__(...)
 |      x.__pos__() <==> +x
 |  
 |  __pow__(...)
 |      x.__pow__(y[, z]) <==> pow(x, y[, z])
 |  
 |  __radd__(...)
 |      x.__radd__(y) <==> y+x
 |  
 |  __rand__(...)
 |      x.__rand__(y) <==> y&x
 |  
 |  __rdiv__(...)
 |      x.__rdiv__(y) <==> y/x
 |  
 |  __rdivmod__(...)
 |      x.__rdivmod__(y) <==> divmod(y, x)
 |  
 |  __repr__(...)
 |      x.__repr__() <==> repr(x)
 |  
 |  __rfloordiv__(...)
 |      x.__rfloordiv__(y) <==> y//x
 |  
 |  __rlshift__(...)
 |      x.__rlshift__(y) <==> y<<x
 |  
 |  __rmod__(...)
 |      x.__rmod__(y) <==> y%x
 |  
 |  __rmul__(...)
 |      x.__rmul__(y) <==> y*x
 |  
 |  __ror__(...)
 |      x.__ror__(y) <==> y|x
 |  
 |  __rpow__(...)
 |      y.__rpow__(x[, z]) <==> pow(x, y[, z])
 |  
 |  __rrshift__(...)
 |      x.__rrshift__(y) <==> y>>x
 |  
 |  __rshift__(...)
 |      x.__rshift__(y) <==> x>>y
 |  
 |  __rsub__(...)
 |      x.__rsub__(y) <==> y-x
 |  
 |  __rtruediv__(...)
 |      x.__rtruediv__(y) <==> y/x
 |  
 |  __rxor__(...)
 |      x.__rxor__(y) <==> y^x
 |  
 |  __str__(...)
 |      x.__str__() <==> str(x)
 |  
 |  __sub__(...)
 |      x.__sub__(y) <==> x-y
 |  
 |  __truediv__(...)
 |      x.__truediv__(y) <==> x/y
 |  
 |  __trunc__(...)
 |      Truncating an Integral returns itself.
 |  
 |  __xor__(...)
 |      x.__xor__(y) <==> x^y
 |  
 |  bit_length(...)
 |      int.bit_length() -> int
 |      
 |      Number of bits necessary to represent self in binary.
 |      >>> bin(37)
 |      '0b100101'
 |      >>> (37).bit_length()
 |      6
 |  
 |  conjugate(...)
 |      Returns self, the complex conjugate of any int.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  denominator
 |      the denominator of a rational number in lowest terms
 |  
 |  imag
 |      the imaginary part of a complex number
 |  
 |  numerator
 |      the numerator of a rational number in lowest terms
 |  
 |  real
 |      the real part of a complex number
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __new__ = <built-in method __new__ of type object>
 |      T.__new__(S, ...) -> a new object with type S, a subtype of T

>>> help(s)
70
0 0
1 1
2 4
3 9
4 16
5 25
6 36
7 49
8 64
9 81
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
Help on module hello:

NAME
    hello

FILE
    /Users/raymondhettinger/dropbox/Public/sj57/hello.py

DATA
    i = 9
    x = 10


>>> help("print")
no documentation found for 'print'

>>> help("for")
The ``for`` statement
*********************

The ``for`` statement is used to iterate over the elements of a
sequence (such as a string, tuple or list) or other iterable object:

   for_stmt ::= "for" target_list "in" expression_list ":" suite
                ["else" ":" suite]

The expression list is evaluated once; it should yield an iterable
object.  An iterator is created for the result of the
``expression_list``.  The suite is then executed once for each item
provided by the iterator, in the order of ascending indices.  Each
item in turn is assigned to the target list using the standard rules
for assignments, and then the suite is executed.  When the items are
exhausted (which is immediately when the sequence is empty), the suite
in the ``else`` clause, if present, is executed, and the loop
terminates.

A ``break`` statement executed in the first suite terminates the loop
without executing the ``else`` clause's suite.  A ``continue``
statement executed in the first suite skips the rest of the suite and
continues with the next item, or with the ``else`` clause if there was
no next item.

The suite may assign to the variable(s) in the target list; this does
not affect the next item assigned to it.

The target list is not deleted when the loop is finished, but if the
sequence is empty, it will not have been assigned to at all by the
loop.  Hint: the built-in function ``range()`` returns a sequence of
integers suitable to emulate the effect of Pascal's ``for i := a to b
do``; e.g., ``range(3)`` returns the list ``[0, 1, 2]``.

Note: There is a subtlety when the sequence is being modified by the loop
  (this can only occur for mutable sequences, i.e. lists). An internal
  counter is used to keep track of which item is used next, and this
  is incremented on each iteration.  When this counter has reached the
  length of the sequence the loop terminates.  This means that if the
  suite deletes the current (or a previous) item from the sequence,
  the next item will be skipped (since it gets the index of the
  current item which has already been treated).  Likewise, if the
  suite inserts an item in the sequence before the current item, the
  current item will be treated again the next time through the loop.
  This can lead to nasty bugs that can be avoided by making a
  temporary copy using a slice of the whole sequence, e.g.,

     for x in a[:]:
         if x < 0: a.remove(x)

Related help topics: break, continue, while

>>> s = 'for'
>>> help(s)
The ``for`` statement
*********************

The ``for`` statement is used to iterate over the elements of a
sequence (such as a string, tuple or list) or other iterable object:

   for_stmt ::= "for" target_list "in" expression_list ":" suite
                ["else" ":" suite]

The expression list is evaluated once; it should yield an iterable
object.  An iterator is created for the result of the
``expression_list``.  The suite is then executed once for each item
provided by the iterator, in the order of ascending indices.  Each
item in turn is assigned to the target list using the standard rules
for assignments, and then the suite is executed.  When the items are
exhausted (which is immediately when the sequence is empty), the suite
in the ``else`` clause, if present, is executed, and the loop
terminates.

A ``break`` statement executed in the first suite terminates the loop
without executing the ``else`` clause's suite.  A ``continue``
statement executed in the first suite skips the rest of the suite and
continues with the next item, or with the ``else`` clause if there was
no next item.

The suite may assign to the variable(s) in the target list; this does
not affect the next item assigned to it.

The target list is not deleted when the loop is finished, but if the
sequence is empty, it will not have been assigned to at all by the
loop.  Hint: the built-in function ``range()`` returns a sequence of
integers suitable to emulate the effect of Pascal's ``for i := a to b
do``; e.g., ``range(3)`` returns the list ``[0, 1, 2]``.

Note: There is a subtlety when the sequence is being modified by the loop
  (this can only occur for mutable sequences, i.e. lists). An internal
  counter is used to keep track of which item is used next, and this
  is incremented on each iteration.  When this counter has reached the
  length of the sequence the loop terminates.  This means that if the
  suite deletes the current (or a previous) item from the sequence,
  the next item will be skipped (since it gets the index of the
  current item which has already been treated).  Likewise, if the
  suite inserts an item in the sequence before the current item, the
  current item will be treated again the next time through the loop.
  This can lead to nasty bugs that can be avoided by making a
  temporary copy using a slice of the whole sequence, e.g.,

     for x in a[:]:
         if x < 0: a.remove(x)

Related help topics: break, continue, while

>>> 
>>> 
>>> 
>>> 
>>> 
>>> [10, 20] + [2, 3]
[10, 20, 2, 3]
>>> [10, 20] + 5

Traceback (most recent call last):
  File "<pyshell#243>", line 1, in <module>
    [10, 20] + 5
TypeError: can only concatenate list (not "int") to list
>>> 
>>> from numpy import *
>>> a = array([10, 20])
>>> b = array([2, 3])
>>> a + b
array([12, 23])
>>> a.dot(b)
80
>>> a + 5
array([15, 25])
>>> 
>>> 
>>> ================================ RESTART ================================
>>> dir()
['__builtins__', '__doc__', '__name__', '__package__']
>>> x

Traceback (most recent call last):
  File "<pyshell#254>", line 1, in <module>
    x
NameError: name 'x' is not defined
>>> x = 10
>>> dir()
['__builtins__', '__doc__', '__name__', '__package__', 'x']
>>> y

Traceback (most recent call last):
  File "<pyshell#257>", line 1, in <module>
    y
NameError: name 'y' is not defined
>>> 
>>> def square(x):
	return x*x

>>> square(5)
25
>>> dir()
['__builtins__', '__doc__', '__name__', '__package__', 'square', 'x']
>>> import math
>>> dir()
['__builtins__', '__doc__', '__name__', '__package__', 'math', 'square', 'x']
>>> 
>>> 
>>> ================================ RESTART ================================
>>> x = 10
>>> def square(x):
	return x*x

>>> import math
>>> 
>>> dir()
['__builtins__', '__doc__', '__name__', '__package__', 'math', 'square', 'x']
>>> cos(3.0)

Traceback (most recent call last):
  File "<pyshell#274>", line 1, in <module>
    cos(3.0)
NameError: name 'cos' is not defined
>>> type(x)
<type 'int'>
>>> type(square)
<type 'function'>
>>> type(math)
<type 'module'>
>>> dir(math)
['__doc__', '__file__', '__name__', '__package__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign', 'cos', 'cosh', 'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'hypot', 'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'modf', 'pi', 'pow', 'radians', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc']
>>> math.cos(3.0)
-0.9899924966004454
>>> 
>>> 
>>> # ALZ
>>> import math
>>> math.cos(3.0 * math.sqrt(2.0) * math.pi) + math.sin(3.0 * math.sqrt(5.0) * math.pi)
1.5168653814545712
>>> 
>>> math.cos
<built-in function cos>
>>> x = 10
>>> cos = math.cos
>>> cos
<built-in function cos>
>>> dir()
['__builtins__', '__doc__', '__name__', '__package__', 'cos', 'math', 'square', 'x']
>>> ================================ RESTART ================================
>>> # ALZ ya hafta to do to do math is
>>> import math
>>> cos = math.cos
>>> sin = math.sin
>>> pi = math.pi
>>> sqrt = math.sqrt
>>> cos(3.0 * sqrt(2.0) * pi) + sin(3.0 * sqrt(5.0) * pi)
1.5168653814545712
>>> 
>>> dir()
['__builtins__', '__doc__', '__name__', '__package__', 'cos', 'math', 'pi', 'sin', 'sqrt']
>>> ================================ RESTART ================================
>>> # ALZ ya hafta to do to do math is
>>> from math import cos, sin, pi, sqrt
>>> dir()
['__builtins__', '__doc__', '__name__', '__package__', 'cos', 'pi', 'sin', 'sqrt']
>>> cos(3.0 * sqrt(2.0) * pi) + sin(3.0 * sqrt(5.0) * pi)
1.5168653814545712
>>> ================================ RESTART ================================
>>> import math
>>> dir(math)
['__doc__', '__file__', '__name__', '__package__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign', 'cos', 'cosh', 'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'hypot', 'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'modf', 'pi', 'pow', 'radians', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc']
>>> ================================ RESTART ================================
>>> from math import *
>>> dir()
['__builtins__', '__doc__', '__name__', '__package__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign', 'cos', 'cosh', 'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'hypot', 'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'modf', 'pi', 'pow', 'radians', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc']
>>> 
>>> ================================ RESTART ================================
>>> # ALZ ya hafta to do to do math is
>>> from math import *
>>> cos(3.0 * sqrt(2.0) * pi) + sin(3.0 * sqrt(5.0) * pi)
1.5168653814545712
>>> ================================ RESTART ================================
>>> c = 10
>>> d = 11
>>> e = 12
>>> f = 13
>>> g = 14
>>> from math import *
>>> log(c)
2.302585092994046
>>> log(d)
2.3978952727983707
>>> log(e)
1.0
>>> c
10
>>> d
11
>>> e
2.718281828459045
>>> from math import *
>>> from random import *
>>> dir()
['Random', 'SystemRandom', 'WichmannHill', '__builtins__', '__doc__', '__name__', '__package__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'betavariate', 'c', 'ceil', 'choice', 'copysign', 'cos', 'cosh', 'd', 'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'expovariate', 'f', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'g', 'gamma', 'gammavariate', 'gauss', 'getrandbits', 'getstate', 'hypot', 'isinf', 'isnan', 'jumpahead', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'lognormvariate', 'modf', 'normalvariate', 'paretovariate', 'pi', 'pow', 'radians', 'randint', 'random', 'randrange', 'sample', 'seed', 'setstate', 'shuffle', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'triangular', 'trunc', 'uniform', 'vonmisesvariate', 'weibullvariate']
>>> 
>>> 
>>> import sys
>>> dir(sys)
['__displayhook__', '__doc__', '__egginsert', '__excepthook__', '__name__', '__package__', '__plen', '__stderr__', '__stdin__', '__stdout__', '_clear_type_cache', '_current_frames', '_getframe', '_mercurial', 'api_version', 'argv', 'builtin_module_names', 'byteorder', 'call_tracing', 'callstats', 'copyright', 'displayhook', 'dont_write_bytecode', 'exc_clear', 'exc_info', 'exc_traceback', 'exc_type', 'exc_value', 'excepthook', 'exec_prefix', 'executable', 'exit', 'flags', 'float_info', 'float_repr_style', 'getcheckinterval', 'getdefaultencoding', 'getdlopenflags', 'getfilesystemencoding', 'getprofile', 'getrecursionlimit', 'getrefcount', 'getsizeof', 'gettrace', 'hexversion', 'long_info', 'maxint', 'maxsize', 'maxunicode', 'meta_path', 'modules', 'path', 'path_hooks', 'path_importer_cache', 'platform', 'prefix', 'py3kwarning', 'setcheckinterval', 'setdlopenflags', 'setprofile', 'setrecursionlimit', 'settrace', 'stderr', 'stdin', 'stdout', 'subversion', 'version', 'version_info', 'warnoptions']
>>> 
>>> 
>>> import sys
>>> sys.float_info
sys.float_info(max=1.7976931348623157e+308, max_exp=1024, max_10_exp=308, min=2.2250738585072014e-308, min_exp=-1021, min_10_exp=-307, dig=15, mant_dig=53, epsilon=2.220446049250313e-16, radix=2, rounds=1)
>>> 
>>> 
>>> 
>>> 11 + 22 == 33
True
>>> 1.1 + 2.2 == 3.3
False
>>> 1.1 + 2.2
3.3000000000000003
>>> 1.1 + 2.2 - 3.3
4.440892098500626e-16
>>> 
>>> s = 1.1 + 2.2
>>> t = 3.3
>>> abs(s - t) < 0.0000001
True
>>> dir
<built-in function dir>
>>> dir()
['Random', 'SystemRandom', 'WichmannHill', '__builtins__', '__doc__', '__name__', '__package__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'betavariate', 'c', 'ceil', 'choice', 'copysign', 'cos', 'cosh', 'd', 'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'expovariate', 'f', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'g', 'gamma', 'gammavariate', 'gauss', 'getrandbits', 'getstate', 'hypot', 'isinf', 'isnan', 'jumpahead', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'lognormvariate', 'modf', 'normalvariate', 'paretovariate', 'pi', 'pow', 'radians', 'randint', 'random', 'randrange', 's', 'sample', 'seed', 'setstate', 'shuffle', 'sin', 'sinh', 'sqrt', 'sys', 't', 'tan', 'tanh', 'triangular', 'trunc', 'uniform', 'vonmisesvariate', 'weibullvariate']
>>> 
>>> 
>>> def square(x):
	return x*x

>>> square
<function square at 0x1004a5aa0>
>>> square(5)
25
>>> x = square
>>> x
<function square at 0x1004a5aa0>
>>> x(5)
25
>>> 
>>> 
>>> 
>>> class A:
	pass

>>> A
<class __main__.A at 0x1004542c0>
>>> a = A()
>>> b = A()
>>> 
>>> 
>>> 



>>> 



>>> 


>>> 

>>> 



>>> 


>>> 


>>> 


>>> 


>>> 


>>> 


>>> 
>>> class A:
	pass

>>> a = A()
>>> b = A()
>>> 
>>> # instances know two things data and class
>>> 
>>> A
<class __main__.A at 0x1017631f0>
>>> a
<__main__.A instance at 0x1016e4758>
>>> b
<__main__.A instance at 0x1016df050>
>>> 
>>> a.__class__
<class __main__.A at 0x1017631f0>
>>> a.__dict__
{}
>>> 
>>> b.__class__
<class __main__.A at 0x1017631f0>
>>> b.__dict__
{}
>>> 
>>> a.color = 'red'
>>> b.color = 'blue'
>>> a.width = 10
>>> 
>>> a.__class__
<class __main__.A at 0x1017631f0>
>>> a.__dict__
{'color': 'red', 'width': 10}
>>> 
>>> b.__dict__
{'color': 'blue'}
>>> a.__class__
<class __main__.A at 0x1017631f0>
>>> class B:
	pass

>>> a.__class__ = B
>>> a.__class__
<class __main__.B at 0x1004542c0>
>>> ================================ RESTART ================================
>>> 
>>> __name__
'__main__'
>>> __doc__
'A simple demonstration of Python classes'
>>> ================================ RESTART ================================
>>> 
>>> 
>>> __name__
'__main__'
>>> __doc__
'A simple demonstration of Python classes'
>>> Dog
<class __main__.Dog at 0x1004542c0>
>>> 
>>> Dog.__name__
'Dog'
>>> Dog.__doc__
'A simple canine class'
>>> ================================ RESTART ================================
>>> 
>>> __name__
'__main__'
>>> __doc__
'A simple demonstration of Python classes'
>>> Dog
<class __main__.Dog at 0x1004542c0>
>>> d
<__main__.Dog instance at 0x1016e0d88>
>>> e
<__main__.Dog instance at 0x1016e04d0>
>>> 
>>> 
>>> # Dog namespace
>>> 
>>> Dog.__name__
'Dog'
>>> Dog.__doc__
'A simple canine class'
>>> Dog.__init__
<unbound method Dog.__init__>
>>> Dog.bark
<unbound method Dog.bark>
>>> 
>>> # d has a namespace
>>> d.name
'Fido'
>>> 
>>> # e has a namespace
>>> e.name
'Buddy'
>>> 
>>> d.bark()
Woof!  Fido is barking
>>> e.bark()
Woof!  Buddy is barking
>>> from turtle import *
>>> clearscreen()
>>> forward(100)
>>> right(90)
>>> 
>>> clearscreen()
>>> forward(100)
>>> right(90)
>>> forward(100)
>>> right(90)
>>> forward(100)
>>> right(90)
>>> forward(100)
>>> right(90)
>>> 
>>> def el():
	forward(100)
	right(90)

	
>>> clearscreen()
>>> el()
>>> el()
>>> el()
>>> el()
>>> clearscreen()
>>> def square():
	el()
	el()
	el()
	el()

	
>>> square()
>>> 
>>> clearscreen()
>>> square()
>>> right(20)
>>> square()
>>> right(20)
>>> square()
>>> 
>>> 360
360
>>> 360 / 20
18
>>> clearscreen()
>>> def star():
	for i in range(18):
		square()
		right(20)

		
>>> star()
>>> 
>>> clearscreen()
>>> el()
>>> forward(100)
>>> right(90)
>>> clearscreen()
>>> color('red')
>>> width(10)
>>> forward(100)
>>> right(90)
>>> forward(100)
>>> 
>>> clearscreen()
>>> 
>>> begin_fill()
>>> color('red', 'orange')
>>> width(10)
>>> square()
>>> end_fill()
>>> 
>>> def star():
	clearscreen()
	begin_fill()
	color('blue', 'green')
	width(3)
	for i in range(18):
		square()
		right(20)
	end_fill()

	
>>> star()
>>> 
