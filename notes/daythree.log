Python 2.7.5 (v2.7.5:ab05e7dd2788, May 13 2013, 13:18:45) 
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type "copyright", "credits" or "license()" for more information.
>>> 

>>> # lists  dicts    -->  files  sets
>>> 
>>> # kap constant, portfolio
>>> s = []
>>> s = list()
>>> [10, 20, 30]
[10, 20, 30]
>>> s = list((10, 20, 30))
>>> 
>>> s = []
>>> s.append(10)
>>> s.append(20)
>>> s
[10, 20]
>>> s.append('hello')
>>> s
[10, 20, 'hello']
>>> def square(x):
	return x*x

>>> square
<function square at 0x1004a5aa0>
>>> s.append(square)
>>> s
[10, 20, 'hello', <function square at 0x1004a5aa0>]
>>> s[0]
10
>>> s[-1]
<function square at 0x1004a5aa0>
>>> s[-1](5)
25
>>> d = {'raymond': 'red'}
>>> d['roger']

Traceback (most recent call last):
  File "<pyshell#25>", line 1, in <module>
    d['roger']
KeyError: 'roger'
>>> s.append(KeyError)
>>> s
[10, 20, 'hello', <function square at 0x1004a5aa0>, <type 'exceptions.KeyError'>]
>>> try:
	print d['roger']
except s[-1]:
	print 'Caught a key error'

	
Caught a key error
>>> 
>>> 
>>> s = [10, 20]
>>> t = [111, 222]
>>> s.append(t)
>>> s
[10, 20, [111, 222]]
>>> 
>>> for x in t:
	print x

	
111
222
>>> for x in t:
	s.append(x)

	
>>> s
[10, 20, [111, 222], 111, 222]
>>> # append(t)      --- puts a box in a box
>>> # for x in t: s.append(x)       --- takes stuff out of a box and puts in another box
>>> 
>>> 
>>> s.extend(t)
>>> s
[10, 20, [111, 222], 111, 222, 111, 222]
>>> 
>>> 
>>> 
>>> 
>>> dir(list)
['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__delslice__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getslice__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__setslice__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']
>>> 
>>> 
>>> s = list('abracadabra')
>>> s
['a', 'b', 'r', 'a', 'c', 'a', 'd', 'a', 'b', 'r', 'a']
>>> 
>>> 

>>> 

































>>> s = list('abracadabra')
>>> s.count('a')
5
>>> s
['a', 'b', 'r', 'a', 'c', 'a', 'd', 'a', 'b', 'r', 'a']
>>> s.index('r')
2
>>> s[2]
'r'
>>> s.index('z')

Traceback (most recent call last):
  File "<pyshell#70>", line 1, in <module>
    s.index('z')
ValueError: 'z' is not in list
>>> s[50]

Traceback (most recent call last):
  File "<pyshell#71>", line 1, in <module>
    s[50]
IndexError: list index out of range
>>> 
>>> 
>>> 
>>> 
>>> 
>>> s = [10, 20]
>>> s.extend((30, 40, 50))
>>> s
[10, 20, 30, 40, 50]
>>> for c in 'Raymond':
	print c

	
R
a
y
m
o
n
d
>>> s.append('Raymond')
>>> s
[10, 20, 30, 40, 50, 'Raymond']
>>> s.extend('Raymond')
>>> s
[10, 20, 30, 40, 50, 'Raymond', 'R', 'a', 'y', 'm', 'o', 'n', 'd']
>>> 
>>> s + [100, 200]
[10, 20, 30, 40, 50, 'Raymond', 'R', 'a', 'y', 'm', 'o', 'n', 'd', 100, 200]
>>> 
>>> s = s + [100, 200]
>>> s
[10, 20, 30, 40, 50, 'Raymond', 'R', 'a', 'y', 'm', 'o', 'n', 'd', 100, 200]
>>> s = s + [100, 200]
>>> s
[10, 20, 30, 40, 50, 'Raymond', 'R', 'a', 'y', 'm', 'o', 'n', 'd', 100, 200, 100, 200]
>>> 
>>> s += [888, 999]
>>> s
[10, 20, 30, 40, 50, 'Raymond', 'R', 'a', 'y', 'm', 'o', 'n', 'd', 100, 200, 100, 200, 888, 999]
>>> s.extend([888, 999])
>>> 
>>> s += (888, 999)
>>> s += 'Raymond'
>>> s
[10, 20, 30, 40, 50, 'Raymond', 'R', 'a', 'y', 'm', 'o', 'n', 'd', 100, 200, 100, 200, 888, 999, 888, 999, 888, 999, 'R', 'a', 'y', 'm', 'o', 'n', 'd']
>>> 
>>> 
>>> 
>>> d = {}
>>> d = dict()
>>> 
>>> d = {'one': 1, 'two': 2}
>>> d['two']
2
>>> 
>>> dict([('one', 1), ('two', 2)])
{'two': 2, 'one': 1}
>>> 
>>> dict(one=1, two=2)
{'two': 2, 'one': 1}
>>> 
>>> dict([('one', 1), ('two', 2)])
{'two': 2, 'one': 1}
>>> 
>>> 
>>> 
>>> d = {'one': 1, 'two': 2}
>>> 
>>> d['two']
2
>>> v = 2
>>> for k in d:
	t = d[k]
	if v == t:
		print k

		
two
>>> 
>>> 2
2





>>> 


>>> 


>>> 
>>> s = [10, 20]
>>> s += 'Raymond'
>>> s
[10, 20, 'R', 'a', 'y', 'm', 'o', 'n', 'd']
>>> s += ['Raymond']
>>> s
[10, 20, 'R', 'a', 'y', 'm', 'o', 'n', 'd', 'Raymond']
>>> s += ['Dean', 'Hettinger']
>>> s
[10, 20, 'R', 'a', 'y', 'm', 'o', 'n', 'd', 'Raymond', 'Dean', 'Hettinger']
>>> s += ('Dean', 'Hettinger')
>>> s
[10, 20, 'R', 'a', 'y', 'm', 'o', 'n', 'd', 'Raymond', 'Dean', 'Hettinger', 'Dean', 'Hettinger']
>>> 
>>> 
>>> d
{'two': 2, 'one': 1}
>>> d['three']

Traceback (most recent call last):
  File "<pyshell#145>", line 1, in <module>
    d['three']
KeyError: 'three'
>>> d.get('three', 'undefined')
'undefined'
>>> d.get('two', 'undefined')
2
>>> # d.GET() does an unconditional lookup that always succeeds
>>> 
>>> price = {'IBM': 65.32, 'CSCO': 24.17, 'GOOG': 868}
>>> 
>>> price.get('CSCO', 0.0)
24.17
>>> price.get('GOOG', 0.0)
868
>>> price.get('MSFT', 0.0)
0.0
>>> 
>>> 
>>> 
>>> price.get('MSFT', 0.0)
0.0
>>> price.get('MSFT', float('inf'))
inf
>>> 
>>> 
>>> s = set('abracadabra')
>>> s
set(['a', 'r', 'b', 'c', 'd'])
>>> len(s)
5
>>> # 1 use case: uniquification   deduping
>>> 'a' in s
True
>>> 'a' not in s
False
>>> 'z' in s
False
>>> # 2 use case:  very, very fast membership testing
>>> 
>>> 
>>> s = set('abracadabra')
>>> t = set('simsalabim')
>>> s.union(t)
set(['a', 'c', 'b', 'd', 'i', 'm', 'l', 's', 'r'])
>>> s.intersection(t)
set(['a', 'b'])
>>> s.difference(t)
set(['c', 'r', 'd'])
>>> t.difference(s)
set(['i', 's', 'm', 'l'])
>>> 
>>> s | t
set(['a', 'c', 'b', 'd', 'i', 'm', 'l', 's', 'r'])
>>> s & t
set(['a', 'b'])
>>> s - t
set(['c', 'r', 'd'])
>>> t - s
set(['i', 's', 'm', 'l'])
>>> 
>>> 
>>> from kap import kap
>>> kap(3524)
3087
>>> 
>>> 
>>> import kap
>>> kap.kap(3524)
3087
>>> 
>>> from math import sin
>>> sin(3.0)
0.1411200080598672
>>> 
>>> import math
>>> math.sin(3.0)
0.1411200080598672
>>> 
>>> 
>>> 
>>> x = 10
>>> 
>>> x = 12
>>> 
>>> 
>>> def f(x):
	return x*x

>>> def f(x):
	return x+x

>>> math = 10
>>> print 10
10
>>> import math
>>> print math
<module 'math' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload/math.so'>
>>> 
>>> e = 10
>>> from math import *
>>> e
2.718281828459045
>>> pi
3.141592653589793
>>> 
>>> # Euler's identity
>>> 
>>> e ** (1j * pi) + 1
1.2246467991473532e-16j
>>> 
>>> 
>>> 
>>> 
>>> 
>>> from kap import kap
>>> kap(3524)
3087
>>> kap(3087)
8352
>>> kap(8352)
6174
>>> kap(6174)
6174
>>> 
>>> 
>>> for i in range(990, 1030):
	print i, kap(i)

	
990 9801
991 9711
992 9621
993 9531
994 9441
995 9351
996 9261
997 9171
998 9081
999 8991
1000 999
1001 1089
1002 2088
1003 3087
1004 4086
1005 5085
1006 6084
1007 7083
1008 8082
1009 9081
1010 1089
1011 999
1012 1998
1013 2997
1014 3996
1015 4995
1016 5994
1017 6993
1018 7992
1019 8991
1020 2088
1021 1998
1022 2088
1023 3087
1024 4086
1025 5085
1026 6084
1027 7083
1028 8082
1029 9081
>>> 
>>> for i in range(990, 1030):
	print '%04d -> %04d;' % (i, kap(i))

	
0990 -> 9801;
0991 -> 9711;
0992 -> 9621;
0993 -> 9531;
0994 -> 9441;
0995 -> 9351;
0996 -> 9261;
0997 -> 9171;
0998 -> 9081;
0999 -> 8991;
1000 -> 0999;
1001 -> 1089;
1002 -> 2088;
1003 -> 3087;
1004 -> 4086;
1005 -> 5085;
1006 -> 6084;
1007 -> 7083;
1008 -> 8082;
1009 -> 9081;
1010 -> 1089;
1011 -> 0999;
1012 -> 1998;
1013 -> 2997;
1014 -> 3996;
1015 -> 4995;
1016 -> 5994;
1017 -> 6993;
1018 -> 7992;
1019 -> 8991;
1020 -> 2088;
1021 -> 1998;
1022 -> 2088;
1023 -> 3087;
1024 -> 4086;
1025 -> 5085;
1026 -> 6084;
1027 -> 7083;
1028 -> 8082;
1029 -> 9081;
>>> ================================ RESTART ================================
>>> 
TestResults(failed=0, attempted=4)
>>> x
10
>>> type(x)
<type 'int'>
>>> dir(x)
['__abs__', '__add__', '__and__', '__class__', '__cmp__', '__coerce__', '__delattr__', '__div__', '__divmod__', '__doc__', '__float__', '__floordiv__', '__format__', '__getattribute__', '__getnewargs__', '__hash__', '__hex__', '__index__', '__init__', '__int__', '__invert__', '__long__', '__lshift__', '__mod__', '__mul__', '__neg__', '__new__', '__nonzero__', '__oct__', '__or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rdiv__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__ror__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__setattr__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', '__truediv__', '__trunc__', '__xor__', 'bit_length', 'conjugate', 'denominator', 'imag', 'numerator', 'real']
>>> ================================ RESTART ================================
>>> 
TestResults(failed=0, attempted=4)
>>> ================================ RESTART ================================
>>> 
TestResults(failed=0, attempted=4)
>>> s = [10, 20, 30]
>>> s
[10, 20, 30]
>>> 
>>> 
>>> type(kapdict)
<type 'dict'>
>>> len(kapdict)
10000
>>> kapdict.items()[:30]
[(0, 0), (1, 999), (2, 1998), (3, 2997), (4, 3996), (5, 4995), (6, 5994), (7, 6993), (8, 7992), (9, 8991), (10, 999), (11, 1089), (12, 2088), (13, 3087), (14, 4086), (15, 5085), (16, 6084), (17, 7083), (18, 8082), (19, 9081), (20, 1998), (21, 2088), (22, 2178), (23, 3177), (24, 4176), (25, 5175), (26, 6174), (27, 7173), (28, 8172), (29, 9171)]
>>> 
>>> kapdict[3524]
3087
>>> kap(3524)
3087
>>> ================================ RESTART ================================
>>> 

Traceback (most recent call last):
  File "/Users/raymondhettinger/dropbox/Public/sj57/kap.py", line 27, in <module>
    kapdict['04d' % i] = '%04' % tgt
ValueError: incomplete format
>>> ================================ RESTART ================================
>>> 

Traceback (most recent call last):
  File "/Users/raymondhettinger/dropbox/Public/sj57/kap.py", line 27, in <module>
    kapdict['%04d' % i] = '%04' % tgt
ValueError: incomplete format
>>> ================================ RESTART ================================
>>> 
TestResults(failed=0, attempted=4)
>>> type(kapdict)
<type 'dict'>
>>> len(kapdict)
10000
>>> kapdict.items()[:30]
[('5988', '3996'), ('5989', '4086'), ('5982', '7263'), ('5983', '6264'), ('5980', '9261'), ('5981', '8262'), ('5986', '4176'), ('5987', '4086'), ('5984', '5265'), ('5985', '4266'), ('6796', '3087'), ('6797', '2997'), ('6794', '5085'), ('6795', '4086'), ('6792', '7083'), ('6793', '6084'), ('6790', '9081'), ('6791', '8082'), ('6798', '3087'), ('6799', '3177'), ('0059', '9441'), ('0058', '8442'), ('0053', '5265'), ('0052', '5175'), ('0051', '5085'), ('0050', '4995'), ('0057', '7443'), ('0056', '6444'), ('0055', '5445'), ('0054', '5355')]
>>> 
>>> 
>>> kapdict['3524']
'3087'
>>> ================================ RESTART ================================
>>> 
TestResults(failed=0, attempted=4)
>>> 
>>> type(firsts)
<type 'set'>
>>> len(firsts)
9945
>>> list(firsts)[:30]
['5988', '5989', '5982', '5983', '5980', '5981', '5986', '5987', '5984', '5985', '6796', '6797', '6794', '6795', '6792', '6793', '6790', '6791', '6798', '6799', '0059', '0058', '0053', '0052', '0051', '0050', '0057', '0056', '0055', '0054']
>>> '0017' in firsts
True
>>> '9261' in firsts
False
>>> ================================ RESTART ================================
>>> 
TestResults(failed=0, attempted=4)
>>> type(rest)
<type 'set'>
>>> len(rest)
55
>>> rest
set(['8172', '8442', '4086', '5445', '5175', '9261', '9531', '2088', '4266', '6534', '5085', '7173', '6084', '4356', '5355', '7443', '1089', '9621', '6354', '7263', '8712', '8532', '3177', '6174', '3996', '2178', '0999', '4176', '7533', '9351', '0000', '8622', '7083', '9441', '6993', '5994', '7353', '9081', '3267', '8352', '3087', '9171', '5265', '8082', '1998', '8991', '6444', '9801', '2997', '7623', '7992', '4995', '8262', '9711', '6264'])
>>> sorted(rest)
['0000', '0999', '1089', '1998', '2088', '2178', '2997', '3087', '3177', '3267', '3996', '4086', '4176', '4266', '4356', '4995', '5085', '5175', '5265', '5355', '5445', '5994', '6084', '6174', '6264', '6354', '6444', '6534', '6993', '7083', '7173', '7263', '7353', '7443', '7533', '7623', '7992', '8082', '8172', '8262', '8352', '8442', '8532', '8622', '8712', '8991', '9081', '9171', '9261', '9351', '9441', '9531', '9621', '9711', '9801']
>>> 
>>> 
>>> len(firsts)
9945
>>> len(rest)
55
>>> len(kapdict)
10000
>>> 
>>> assert 3 + 5 == 8
>>> assert 3 + 5 == 10

Traceback (most recent call last):
  File "<pyshell#277>", line 1, in <module>
    assert 3 + 5 == 10
AssertionError
>>> ================================ RESTART ================================
>>> 
TestResults(failed=0, attempted=4)
>>> ================================ RESTART ================================
>>> 
8172 -> 7443;
8442 -> 5994;
4086 -> 8172;
5445 -> 1089;
5175 -> 5994;
9261 -> 8352;
9531 -> 8172;
2088 -> 8532;
4266 -> 4176;
6534 -> 3087;
5085 -> 7992;
7173 -> 6354;
6084 -> 8172;
4356 -> 3087;
5355 -> 1998;
7443 -> 3996;
1089 -> 9621;
9621 -> 8352;
6354 -> 3087;
7263 -> 5265;
8712 -> 7443;
8532 -> 6174;
3177 -> 6354;
6174 -> 6174;
3996 -> 6264;
2178 -> 7443;
0999 -> 8991;
4176 -> 6174;
7533 -> 4176;
9351 -> 8172;
0000 -> 0000;
8622 -> 6354;
7083 -> 8352;
9441 -> 7992;
6993 -> 6264;
5994 -> 5355;
7353 -> 4176;
9081 -> 9621;
3267 -> 5265;
8352 -> 6174;
3087 -> 8352;
9171 -> 8532;
5265 -> 3996;
8082 -> 8532;
1998 -> 8082;
8991 -> 8082;
6444 -> 1998;
9801 -> 9621;
2997 -> 7173;
7623 -> 5265;
7992 -> 7173;
4995 -> 5355;
8262 -> 6354;
9711 -> 8532;
6264 -> 4176;
TestResults(failed=0, attempted=4)
>>> ================================ RESTART ================================
>>> 
0000 -> 0000;
0999 -> 8991;
1089 -> 9621;
1998 -> 8082;
2088 -> 8532;
2178 -> 7443;
2997 -> 7173;
3087 -> 8352;
3177 -> 6354;
3267 -> 5265;
3996 -> 6264;
4086 -> 8172;
4176 -> 6174;
4266 -> 4176;
4356 -> 3087;
4995 -> 5355;
5085 -> 7992;
5175 -> 5994;
5265 -> 3996;
5355 -> 1998;
5445 -> 1089;
5994 -> 5355;
6084 -> 8172;
6174 -> 6174;
6264 -> 4176;
6354 -> 3087;
6444 -> 1998;
6534 -> 3087;
6993 -> 6264;
7083 -> 8352;
7173 -> 6354;
7263 -> 5265;
7353 -> 4176;
7443 -> 3996;
7533 -> 4176;
7623 -> 5265;
7992 -> 7173;
8082 -> 8532;
8172 -> 7443;
8262 -> 6354;
8352 -> 6174;
8442 -> 5994;
8532 -> 6174;
8622 -> 6354;
8712 -> 7443;
8991 -> 8082;
9081 -> 9621;
9171 -> 8532;
9261 -> 8352;
9351 -> 8172;
9441 -> 7992;
9531 -> 8172;
9621 -> 8352;
9711 -> 8532;
9801 -> 9621;
TestResults(failed=0, attempted=4)
>>> ================================ RESTART ================================
>>> 
TestResults(failed=0, attempted=4)
>>> type(groups)
<type 'dict'>
>>> len(groups)
55
>>> group = groups['7083']
>>> type(group)
<type 'list'>
>>> len(group)
432
>>> group[:30]
['0017', '0071', '0107', '0127', '0170', '0172', '0217', '0237', '0271', '0273', '0327', '0347', '0372', '0374', '0437', '0457', '0473', '0475', '0547', '0567', '0574', '0576', '0657', '0675', '0677', '0701', '0710', '0712', '0721', '0723']
>>> 
>>> kapdict['0017']
'7083'
>>> kapdict['0071']
'7083'
>>> kapdict['0107']
'7083'
>>> ================================ RESTART ================================
>>> 
['1111', '2222', '3333'] -> 0000;
['0001', '0010', '0100'] -> 0999;
['0011', '0101', '0110'] -> 1089;
['0002', '0020', '0112'] -> 1998;
['0012', '0021', '0102'] -> 2088;
['0022', '0202', '0220'] -> 2178;
['0003', '0030', '0113'] -> 2997;
['0013', '0031', '0103'] -> 3087;
['0023', '0032', '0133'] -> 3177;
['0033', '0303', '0330'] -> 3267;
['0004', '0040', '0114'] -> 3996;
['0014', '0041', '0104'] -> 4086;
['0024', '0042', '0134'] -> 4176;
['0034', '0043', '0144'] -> 4266;
['0044', '0404', '0440'] -> 4356;
['0005', '0050', '0115'] -> 4995;
['0015', '0051', '0105'] -> 5085;
['0025', '0052', '0135'] -> 5175;
['0035', '0053', '0145'] -> 5265;
['0045', '0054', '0155'] -> 5355;
['0055', '0505', '0550'] -> 5445;
['0006', '0060', '0116'] -> 5994;
['0016', '0061', '0106'] -> 6084;
['0026', '0062', '0136'] -> 6174;
['0036', '0063', '0146'] -> 6264;
['0046', '0064', '0156'] -> 6354;
['0056', '0065', '0166'] -> 6444;
['0066', '0606', '0660'] -> 6534;
['0007', '0070', '0117'] -> 6993;
['0017', '0071', '0107'] -> 7083;
['0027', '0072', '0137'] -> 7173;
['0037', '0073', '0147'] -> 7263;
['0047', '0074', '0157'] -> 7353;
['0057', '0075', '0167'] -> 7443;
['0067', '0076', '0177'] -> 7533;
['0077', '0707', '0770'] -> 7623;
['0008', '0080', '0118'] -> 7992;
['0018', '0081', '0108'] -> 8082;
['0028', '0082', '0138'] -> 8172;
['0038', '0083', '0148'] -> 8262;
['0048', '0084', '0158'] -> 8352;
['0058', '0085', '0168'] -> 8442;
['0068', '0086', '0178'] -> 8532;
['0078', '0087', '0188'] -> 8622;
['0088', '0808', '0880'] -> 8712;
['0009', '0090', '0119'] -> 8991;
['0019', '0091', '0109'] -> 9081;
['0029', '0092', '0139'] -> 9171;
['0039', '0093', '0149'] -> 9261;
['0049', '0094', '0159'] -> 9351;
['0059', '0095', '0169'] -> 9441;
['0069', '0096', '0179'] -> 9531;
['0079', '0097', '0189'] -> 9621;
['0089', '0098', '0199'] -> 9711;
['0099', '0909', '0990'] -> 9801;
TestResults(failed=0, attempted=4)
>>> ================================ RESTART ================================
>>> 
1111, 2222, 3333 -> 0000;
0001, 0010, 0100 -> 0999;
0011, 0101, 0110 -> 1089;
0002, 0020, 0112 -> 1998;
0012, 0021, 0102 -> 2088;
0022, 0202, 0220 -> 2178;
0003, 0030, 0113 -> 2997;
0013, 0031, 0103 -> 3087;
0023, 0032, 0133 -> 3177;
0033, 0303, 0330 -> 3267;
0004, 0040, 0114 -> 3996;
0014, 0041, 0104 -> 4086;
0024, 0042, 0134 -> 4176;
0034, 0043, 0144 -> 4266;
0044, 0404, 0440 -> 4356;
0005, 0050, 0115 -> 4995;
0015, 0051, 0105 -> 5085;
0025, 0052, 0135 -> 5175;
0035, 0053, 0145 -> 5265;
0045, 0054, 0155 -> 5355;
0055, 0505, 0550 -> 5445;
0006, 0060, 0116 -> 5994;
0016, 0061, 0106 -> 6084;
0026, 0062, 0136 -> 6174;
0036, 0063, 0146 -> 6264;
0046, 0064, 0156 -> 6354;
0056, 0065, 0166 -> 6444;
0066, 0606, 0660 -> 6534;
0007, 0070, 0117 -> 6993;
0017, 0071, 0107 -> 7083;
0027, 0072, 0137 -> 7173;
0037, 0073, 0147 -> 7263;
0047, 0074, 0157 -> 7353;
0057, 0075, 0167 -> 7443;
0067, 0076, 0177 -> 7533;
0077, 0707, 0770 -> 7623;
0008, 0080, 0118 -> 7992;
0018, 0081, 0108 -> 8082;
0028, 0082, 0138 -> 8172;
0038, 0083, 0148 -> 8262;
0048, 0084, 0158 -> 8352;
0058, 0085, 0168 -> 8442;
0068, 0086, 0178 -> 8532;
0078, 0087, 0188 -> 8622;
0088, 0808, 0880 -> 8712;
0009, 0090, 0119 -> 8991;
0019, 0091, 0109 -> 9081;
0029, 0092, 0139 -> 9171;
0039, 0093, 0149 -> 9261;
0049, 0094, 0159 -> 9351;
0059, 0095, 0169 -> 9441;
0069, 0096, 0179 -> 9531;
0079, 0097, 0189 -> 9621;
0089, 0098, 0199 -> 9711;
0099, 0909, 0990 -> 9801;
TestResults(failed=0, attempted=4)
>>> ================================ RESTART ================================
>>> 
"1111, 2222, 3333" -> 0000;
"0001, 0010, 0100" -> 0999;
"0011, 0101, 0110" -> 1089;
"0002, 0020, 0112" -> 1998;
"0012, 0021, 0102" -> 2088;
"0022, 0202, 0220" -> 2178;
"0003, 0030, 0113" -> 2997;
"0013, 0031, 0103" -> 3087;
"0023, 0032, 0133" -> 3177;
"0033, 0303, 0330" -> 3267;
"0004, 0040, 0114" -> 3996;
"0014, 0041, 0104" -> 4086;
"0024, 0042, 0134" -> 4176;
"0034, 0043, 0144" -> 4266;
"0044, 0404, 0440" -> 4356;
"0005, 0050, 0115" -> 4995;
"0015, 0051, 0105" -> 5085;
"0025, 0052, 0135" -> 5175;
"0035, 0053, 0145" -> 5265;
"0045, 0054, 0155" -> 5355;
"0055, 0505, 0550" -> 5445;
"0006, 0060, 0116" -> 5994;
"0016, 0061, 0106" -> 6084;
"0026, 0062, 0136" -> 6174;
"0036, 0063, 0146" -> 6264;
"0046, 0064, 0156" -> 6354;
"0056, 0065, 0166" -> 6444;
"0066, 0606, 0660" -> 6534;
"0007, 0070, 0117" -> 6993;
"0017, 0071, 0107" -> 7083;
"0027, 0072, 0137" -> 7173;
"0037, 0073, 0147" -> 7263;
"0047, 0074, 0157" -> 7353;
"0057, 0075, 0167" -> 7443;
"0067, 0076, 0177" -> 7533;
"0077, 0707, 0770" -> 7623;
"0008, 0080, 0118" -> 7992;
"0018, 0081, 0108" -> 8082;
"0028, 0082, 0138" -> 8172;
"0038, 0083, 0148" -> 8262;
"0048, 0084, 0158" -> 8352;
"0058, 0085, 0168" -> 8442;
"0068, 0086, 0178" -> 8532;
"0078, 0087, 0188" -> 8622;
"0088, 0808, 0880" -> 8712;
"0009, 0090, 0119" -> 8991;
"0019, 0091, 0109" -> 9081;
"0029, 0092, 0139" -> 9171;
"0039, 0093, 0149" -> 9261;
"0049, 0094, 0159" -> 9351;
"0059, 0095, 0169" -> 9441;
"0069, 0096, 0179" -> 9531;
"0079, 0097, 0189" -> 9621;
"0089, 0098, 0199" -> 9711;
"0099, 0909, 0990" -> 9801;
TestResults(failed=0, attempted=4)
>>> ================================ RESTART ================================
>>> 
"1111, 2222, 3333, ..." -> 0000;
"0001, 0010, 0100, ..." -> 0999;
"0011, 0101, 0110, ..." -> 1089;
"0002, 0020, 0112, ..." -> 1998;
"0012, 0021, 0102, ..." -> 2088;
"0022, 0202, 0220, ..." -> 2178;
"0003, 0030, 0113, ..." -> 2997;
"0013, 0031, 0103, ..." -> 3087;
"0023, 0032, 0133, ..." -> 3177;
"0033, 0303, 0330, ..." -> 3267;
"0004, 0040, 0114, ..." -> 3996;
"0014, 0041, 0104, ..." -> 4086;
"0024, 0042, 0134, ..." -> 4176;
"0034, 0043, 0144, ..." -> 4266;
"0044, 0404, 0440, ..." -> 4356;
"0005, 0050, 0115, ..." -> 4995;
"0015, 0051, 0105, ..." -> 5085;
"0025, 0052, 0135, ..." -> 5175;
"0035, 0053, 0145, ..." -> 5265;
"0045, 0054, 0155, ..." -> 5355;
"0055, 0505, 0550, ..." -> 5445;
"0006, 0060, 0116, ..." -> 5994;
"0016, 0061, 0106, ..." -> 6084;
"0026, 0062, 0136, ..." -> 6174;
"0036, 0063, 0146, ..." -> 6264;
"0046, 0064, 0156, ..." -> 6354;
"0056, 0065, 0166, ..." -> 6444;
"0066, 0606, 0660, ..." -> 6534;
"0007, 0070, 0117, ..." -> 6993;
"0017, 0071, 0107, ..." -> 7083;
"0027, 0072, 0137, ..." -> 7173;
"0037, 0073, 0147, ..." -> 7263;
"0047, 0074, 0157, ..." -> 7353;
"0057, 0075, 0167, ..." -> 7443;
"0067, 0076, 0177, ..." -> 7533;
"0077, 0707, 0770, ..." -> 7623;
"0008, 0080, 0118, ..." -> 7992;
"0018, 0081, 0108, ..." -> 8082;
"0028, 0082, 0138, ..." -> 8172;
"0038, 0083, 0148, ..." -> 8262;
"0048, 0084, 0158, ..." -> 8352;
"0058, 0085, 0168, ..." -> 8442;
"0068, 0086, 0178, ..." -> 8532;
"0078, 0087, 0188, ..." -> 8622;
"0088, 0808, 0880, ..." -> 8712;
"0009, 0090, 0119, ..." -> 8991;
"0019, 0091, 0109, ..." -> 9081;
"0029, 0092, 0139, ..." -> 9171;
"0039, 0093, 0149, ..." -> 9261;
"0049, 0094, 0159, ..." -> 9351;
"0059, 0095, 0169, ..." -> 9441;
"0069, 0096, 0179, ..." -> 9531;
"0079, 0097, 0189, ..." -> 9621;
"0089, 0098, 0199, ..." -> 9711;
"0099, 0909, 0990, ..." -> 9801;
TestResults(failed=0, attempted=4)
>>> ================================ RESTART ================================
>>> 
0000 -> 0000;
0999 -> 8991;
1089 -> 9621;
1998 -> 8082;
2088 -> 8532;
2178 -> 7443;
2997 -> 7173;
3087 -> 8352;
3177 -> 6354;
3267 -> 5265;
3996 -> 6264;
4086 -> 8172;
4176 -> 6174;
4266 -> 4176;
4356 -> 3087;
4995 -> 5355;
5085 -> 7992;
5175 -> 5994;
5265 -> 3996;
5355 -> 1998;
5445 -> 1089;
5994 -> 5355;
6084 -> 8172;
6174 -> 6174;
6264 -> 4176;
6354 -> 3087;
6444 -> 1998;
6534 -> 3087;
6993 -> 6264;
7083 -> 8352;
7173 -> 6354;
7263 -> 5265;
7353 -> 4176;
7443 -> 3996;
7533 -> 4176;
7623 -> 5265;
7992 -> 7173;
8082 -> 8532;
8172 -> 7443;
8262 -> 6354;
8352 -> 6174;
8442 -> 5994;
8532 -> 6174;
8622 -> 6354;
8712 -> 7443;
8991 -> 8082;
9081 -> 9621;
9171 -> 8532;
9261 -> 8352;
9351 -> 8172;
9441 -> 7992;
9531 -> 8172;
9621 -> 8352;
9711 -> 8532;
9801 -> 9621;
"1111, 2222, 3333, ..." -> 0000;
"0001, 0010, 0100, ..." -> 0999;
"0011, 0101, 0110, ..." -> 1089;
"0002, 0020, 0112, ..." -> 1998;
"0012, 0021, 0102, ..." -> 2088;
"0022, 0202, 0220, ..." -> 2178;
"0003, 0030, 0113, ..." -> 2997;
"0013, 0031, 0103, ..." -> 3087;
"0023, 0032, 0133, ..." -> 3177;
"0033, 0303, 0330, ..." -> 3267;
"0004, 0040, 0114, ..." -> 3996;
"0014, 0041, 0104, ..." -> 4086;
"0024, 0042, 0134, ..." -> 4176;
"0034, 0043, 0144, ..." -> 4266;
"0044, 0404, 0440, ..." -> 4356;
"0005, 0050, 0115, ..." -> 4995;
"0015, 0051, 0105, ..." -> 5085;
"0025, 0052, 0135, ..." -> 5175;
"0035, 0053, 0145, ..." -> 5265;
"0045, 0054, 0155, ..." -> 5355;
"0055, 0505, 0550, ..." -> 5445;
"0006, 0060, 0116, ..." -> 5994;
"0016, 0061, 0106, ..." -> 6084;
"0026, 0062, 0136, ..." -> 6174;
"0036, 0063, 0146, ..." -> 6264;
"0046, 0064, 0156, ..." -> 6354;
"0056, 0065, 0166, ..." -> 6444;
"0066, 0606, 0660, ..." -> 6534;
"0007, 0070, 0117, ..." -> 6993;
"0017, 0071, 0107, ..." -> 7083;
"0027, 0072, 0137, ..." -> 7173;
"0037, 0073, 0147, ..." -> 7263;
"0047, 0074, 0157, ..." -> 7353;
"0057, 0075, 0167, ..." -> 7443;
"0067, 0076, 0177, ..." -> 7533;
"0077, 0707, 0770, ..." -> 7623;
"0008, 0080, 0118, ..." -> 7992;
"0018, 0081, 0108, ..." -> 8082;
"0028, 0082, 0138, ..." -> 8172;
"0038, 0083, 0148, ..." -> 8262;
"0048, 0084, 0158, ..." -> 8352;
"0058, 0085, 0168, ..." -> 8442;
"0068, 0086, 0178, ..." -> 8532;
"0078, 0087, 0188, ..." -> 8622;
"0088, 0808, 0880, ..." -> 8712;
"0009, 0090, 0119, ..." -> 8991;
"0019, 0091, 0109, ..." -> 9081;
"0029, 0092, 0139, ..." -> 9171;
"0039, 0093, 0149, ..." -> 9261;
"0049, 0094, 0159, ..." -> 9351;
"0059, 0095, 0169, ..." -> 9441;
"0069, 0096, 0179, ..." -> 9531;
"0079, 0097, 0189, ..." -> 9621;
"0089, 0098, 0199, ..." -> 9711;
"0099, 0909, 0990, ..." -> 9801;
TestResults(failed=0, attempted=4)
>>> ================================ RESTART ================================
>>> 
digraph {
graph [rankdir=LR, label="Kaprekar Process", labelloc=t, fontsize=48];
edge [color=blue, fontsize=10, fontcolor=blue];

0000 -> 0000;
0999 -> 8991;
1089 -> 9621;
1998 -> 8082;
2088 -> 8532;
2178 -> 7443;
2997 -> 7173;
3087 -> 8352;
3177 -> 6354;
3267 -> 5265;
3996 -> 6264;
4086 -> 8172;
4176 -> 6174;
4266 -> 4176;
4356 -> 3087;
4995 -> 5355;
5085 -> 7992;
5175 -> 5994;
5265 -> 3996;
5355 -> 1998;
5445 -> 1089;
5994 -> 5355;
6084 -> 8172;
6174 -> 6174;
6264 -> 4176;
6354 -> 3087;
6444 -> 1998;
6534 -> 3087;
6993 -> 6264;
7083 -> 8352;
7173 -> 6354;
7263 -> 5265;
7353 -> 4176;
7443 -> 3996;
7533 -> 4176;
7623 -> 5265;
7992 -> 7173;
8082 -> 8532;
8172 -> 7443;
8262 -> 6354;
8352 -> 6174;
8442 -> 5994;
8532 -> 6174;
8622 -> 6354;
8712 -> 7443;
8991 -> 8082;
9081 -> 9621;
9171 -> 8532;
9261 -> 8352;
9351 -> 8172;
9441 -> 7992;
9531 -> 8172;
9621 -> 8352;
9711 -> 8532;
9801 -> 9621;
node [shape=rectangle];
"1111, 2222, 3333, ..." -> 0000;
"0001, 0010, 0100, ..." -> 0999;
"0011, 0101, 0110, ..." -> 1089;
"0002, 0020, 0112, ..." -> 1998;
"0012, 0021, 0102, ..." -> 2088;
"0022, 0202, 0220, ..." -> 2178;
"0003, 0030, 0113, ..." -> 2997;
"0013, 0031, 0103, ..." -> 3087;
"0023, 0032, 0133, ..." -> 3177;
"0033, 0303, 0330, ..." -> 3267;
"0004, 0040, 0114, ..." -> 3996;
"0014, 0041, 0104, ..." -> 4086;
"0024, 0042, 0134, ..." -> 4176;
"0034, 0043, 0144, ..." -> 4266;
"0044, 0404, 0440, ..." -> 4356;
"0005, 0050, 0115, ..." -> 4995;
"0015, 0051, 0105, ..." -> 5085;
"0025, 0052, 0135, ..." -> 5175;
"0035, 0053, 0145, ..." -> 5265;
"0045, 0054, 0155, ..." -> 5355;
"0055, 0505, 0550, ..." -> 5445;
"0006, 0060, 0116, ..." -> 5994;
"0016, 0061, 0106, ..." -> 6084;
"0026, 0062, 0136, ..." -> 6174;
"0036, 0063, 0146, ..." -> 6264;
"0046, 0064, 0156, ..." -> 6354;
"0056, 0065, 0166, ..." -> 6444;
"0066, 0606, 0660, ..." -> 6534;
"0007, 0070, 0117, ..." -> 6993;
"0017, 0071, 0107, ..." -> 7083;
"0027, 0072, 0137, ..." -> 7173;
"0037, 0073, 0147, ..." -> 7263;
"0047, 0074, 0157, ..." -> 7353;
"0057, 0075, 0167, ..." -> 7443;
"0067, 0076, 0177, ..." -> 7533;
"0077, 0707, 0770, ..." -> 7623;
"0008, 0080, 0118, ..." -> 7992;
"0018, 0081, 0108, ..." -> 8082;
"0028, 0082, 0138, ..." -> 8172;
"0038, 0083, 0148, ..." -> 8262;
"0048, 0084, 0158, ..." -> 8352;
"0058, 0085, 0168, ..." -> 8442;
"0068, 0086, 0178, ..." -> 8532;
"0078, 0087, 0188, ..." -> 8622;
"0088, 0808, 0880, ..." -> 8712;
"0009, 0090, 0119, ..." -> 8991;
"0019, 0091, 0109, ..." -> 9081;
"0029, 0092, 0139, ..." -> 9171;
"0039, 0093, 0149, ..." -> 9261;
"0049, 0094, 0159, ..." -> 9351;
"0059, 0095, 0169, ..." -> 9441;
"0069, 0096, 0179, ..." -> 9531;
"0079, 0097, 0189, ..." -> 9621;
"0089, 0098, 0199, ..." -> 9711;
"0099, 0909, 0990, ..." -> 9801;
}
TestResults(failed=0, attempted=4)
>>> ================================ RESTART ================================
>>> 
digraph {
graph [rankdir=LR, label="Kaprekar Process", labelloc=t, fontsize=48];
edge [color=blue, fontsize=10, fontcolor=blue];

0000 -> 0000;
0999 -> 8991;
1089 -> 9621;
1998 -> 8082;
2088 -> 8532;
2178 -> 7443;
2997 -> 7173;
3087 -> 8352;
3177 -> 6354;
3267 -> 5265;
3996 -> 6264;
4086 -> 8172;
4176 -> 6174;
4266 -> 4176;
4356 -> 3087;
4995 -> 5355;
5085 -> 7992;
5175 -> 5994;
5265 -> 3996;
5355 -> 1998;
5445 -> 1089;
5994 -> 5355;
6084 -> 8172;
6174 -> 6174;
6264 -> 4176;
6354 -> 3087;
6444 -> 1998;
6534 -> 3087;
6993 -> 6264;
7083 -> 8352;
7173 -> 6354;
7263 -> 5265;
7353 -> 4176;
7443 -> 3996;
7533 -> 4176;
7623 -> 5265;
7992 -> 7173;
8082 -> 8532;
8172 -> 7443;
8262 -> 6354;
8352 -> 6174;
8442 -> 5994;
8532 -> 6174;
8622 -> 6354;
8712 -> 7443;
8991 -> 8082;
9081 -> 9621;
9171 -> 8532;
9261 -> 8352;
9351 -> 8172;
9441 -> 7992;
9531 -> 8172;
9621 -> 8352;
9711 -> 8532;
9801 -> 9621;
node [shape=rectangle];
"1111, 2222, 3333, ..." -> 0000 [label=9];
"0001, 0010, 0100, ..." -> 0999 [label=72];
"0011, 0101, 0110, ..." -> 1089 [label=53];
"0002, 0020, 0112, ..." -> 1998 [label=158];
"0012, 0021, 0102, ..." -> 2088 [label=192];
"0022, 0202, 0220, ..." -> 2178 [label=48];
"0003, 0030, 0113, ..." -> 2997 [label=224];
"0013, 0031, 0103, ..." -> 3087 [label=333];
"0023, 0032, 0133, ..." -> 3177 [label=168];
"0033, 0303, 0330, ..." -> 3267 [label=42];
"0004, 0040, 0114, ..." -> 3996 [label=262];
"0014, 0041, 0104, ..." -> 4086 [label=432];
"0024, 0042, 0134, ..." -> 4176 [label=284];
"0034, 0043, 0144, ..." -> 4266 [label=144];
"0044, 0404, 0440, ..." -> 4356 [label=36];
"0005, 0050, 0115, ..." -> 4995 [label=280];
"0015, 0051, 0105, ..." -> 5085 [label=480];
"0025, 0052, 0135, ..." -> 5175 [label=360];
"0035, 0053, 0145, ..." -> 5265 [label=237];
"0045, 0054, 0155, ..." -> 5355 [label=118];
"0055, 0505, 0550, ..." -> 5445 [label=30];
"0006, 0060, 0116, ..." -> 5994 [label=270];
"0016, 0061, 0106, ..." -> 6084 [label=480];
"0026, 0062, 0136, ..." -> 6174 [label=380];
"0036, 0063, 0146, ..." -> 6264 [label=286];
"0046, 0064, 0156, ..." -> 6354 [label=188];
"0056, 0065, 0166, ..." -> 6444 [label=96];
"0066, 0606, 0660, ..." -> 6534 [label=24];
"0007, 0070, 0117, ..." -> 6993 [label=240];
"0017, 0071, 0107, ..." -> 7083 [label=432];
"0027, 0072, 0137, ..." -> 7173 [label=358];
"0037, 0073, 0147, ..." -> 7263 [label=288];
"0047, 0074, 0157, ..." -> 7353 [label=216];
"0057, 0075, 0167, ..." -> 7443 [label=141];
"0067, 0076, 0177, ..." -> 7533 [label=72];
"0077, 0707, 0770, ..." -> 7623 [label=18];
"0008, 0080, 0118, ..." -> 7992 [label=182];
"0018, 0081, 0108, ..." -> 8082 [label=334];
"0028, 0082, 0138, ..." -> 8172 [label=284];
"0038, 0083, 0148, ..." -> 8262 [label=240];
"0048, 0084, 0158, ..." -> 8352 [label=188];
"0058, 0085, 0168, ..." -> 8442 [label=144];
"0068, 0086, 0178, ..." -> 8532 [label=92];
"0078, 0087, 0188, ..." -> 8622 [label=48];
"0088, 0808, 0880, ..." -> 8712 [label=12];
"0009, 0090, 0119, ..." -> 8991 [label=103];
"0019, 0091, 0109, ..." -> 9081 [label=192];
"0029, 0092, 0139, ..." -> 9171 [label=168];
"0039, 0093, 0149, ..." -> 9261 [label=144];
"0049, 0094, 0159, ..." -> 9351 [label=120];
"0059, 0095, 0169, ..." -> 9441 [label=96];
"0069, 0096, 0179, ..." -> 9531 [label=72];
"0079, 0097, 0189, ..." -> 9621 [label=45];
"0089, 0098, 0199, ..." -> 9711 [label=24];
"0099, 0909, 0990, ..." -> 9801 [label=6];
}
TestResults(failed=0, attempted=4)
>>> ================================ RESTART ================================
>>> 
    digraph {
    graph [rankdir=LR, label="Kaprekar Process", labelloc=t, fontsize=48];
    edge [color=blue, fontsize=10, fontcolor=blue];
    
0000 -> 0000;
0999 -> 8991;
1089 -> 9621;
1998 -> 8082;
2088 -> 8532;
2178 -> 7443;
2997 -> 7173;
3087 -> 8352;
3177 -> 6354;
3267 -> 5265;
3996 -> 6264;
4086 -> 8172;
4176 -> 6174;
4266 -> 4176;
4356 -> 3087;
4995 -> 5355;
5085 -> 7992;
5175 -> 5994;
5265 -> 3996;
5355 -> 1998;
5445 -> 1089;
5994 -> 5355;
6084 -> 8172;
6174 -> 6174;
6264 -> 4176;
6354 -> 3087;
6444 -> 1998;
6534 -> 3087;
6993 -> 6264;
7083 -> 8352;
7173 -> 6354;
7263 -> 5265;
7353 -> 4176;
7443 -> 3996;
7533 -> 4176;
7623 -> 5265;
7992 -> 7173;
8082 -> 8532;
8172 -> 7443;
8262 -> 6354;
8352 -> 6174;
8442 -> 5994;
8532 -> 6174;
8622 -> 6354;
8712 -> 7443;
8991 -> 8082;
9081 -> 9621;
9171 -> 8532;
9261 -> 8352;
9351 -> 8172;
9441 -> 7992;
9531 -> 8172;
9621 -> 8352;
9711 -> 8532;
9801 -> 9621;
node [shape=rectangle];
"1111, 2222, 3333, ..." -> 0000 [label=9];
"0001, 0010, 0100, ..." -> 0999 [label=72];
"0011, 0101, 0110, ..." -> 1089 [label=53];
"0002, 0020, 0112, ..." -> 1998 [label=158];
"0012, 0021, 0102, ..." -> 2088 [label=192];
"0022, 0202, 0220, ..." -> 2178 [label=48];
"0003, 0030, 0113, ..." -> 2997 [label=224];
"0013, 0031, 0103, ..." -> 3087 [label=333];
"0023, 0032, 0133, ..." -> 3177 [label=168];
"0033, 0303, 0330, ..." -> 3267 [label=42];
"0004, 0040, 0114, ..." -> 3996 [label=262];
"0014, 0041, 0104, ..." -> 4086 [label=432];
"0024, 0042, 0134, ..." -> 4176 [label=284];
"0034, 0043, 0144, ..." -> 4266 [label=144];
"0044, 0404, 0440, ..." -> 4356 [label=36];
"0005, 0050, 0115, ..." -> 4995 [label=280];
"0015, 0051, 0105, ..." -> 5085 [label=480];
"0025, 0052, 0135, ..." -> 5175 [label=360];
"0035, 0053, 0145, ..." -> 5265 [label=237];
"0045, 0054, 0155, ..." -> 5355 [label=118];
"0055, 0505, 0550, ..." -> 5445 [label=30];
"0006, 0060, 0116, ..." -> 5994 [label=270];
"0016, 0061, 0106, ..." -> 6084 [label=480];
"0026, 0062, 0136, ..." -> 6174 [label=380];
"0036, 0063, 0146, ..." -> 6264 [label=286];
"0046, 0064, 0156, ..." -> 6354 [label=188];
"0056, 0065, 0166, ..." -> 6444 [label=96];
"0066, 0606, 0660, ..." -> 6534 [label=24];
"0007, 0070, 0117, ..." -> 6993 [label=240];
"0017, 0071, 0107, ..." -> 7083 [label=432];
"0027, 0072, 0137, ..." -> 7173 [label=358];
"0037, 0073, 0147, ..." -> 7263 [label=288];
"0047, 0074, 0157, ..." -> 7353 [label=216];
"0057, 0075, 0167, ..." -> 7443 [label=141];
"0067, 0076, 0177, ..." -> 7533 [label=72];
"0077, 0707, 0770, ..." -> 7623 [label=18];
"0008, 0080, 0118, ..." -> 7992 [label=182];
"0018, 0081, 0108, ..." -> 8082 [label=334];
"0028, 0082, 0138, ..." -> 8172 [label=284];
"0038, 0083, 0148, ..." -> 8262 [label=240];
"0048, 0084, 0158, ..." -> 8352 [label=188];
"0058, 0085, 0168, ..." -> 8442 [label=144];
"0068, 0086, 0178, ..." -> 8532 [label=92];
"0078, 0087, 0188, ..." -> 8622 [label=48];
"0088, 0808, 0880, ..." -> 8712 [label=12];
"0009, 0090, 0119, ..." -> 8991 [label=103];
"0019, 0091, 0109, ..." -> 9081 [label=192];
"0029, 0092, 0139, ..." -> 9171 [label=168];
"0039, 0093, 0149, ..." -> 9261 [label=144];
"0049, 0094, 0159, ..." -> 9351 [label=120];
"0059, 0095, 0169, ..." -> 9441 [label=96];
"0069, 0096, 0179, ..." -> 9531 [label=72];
"0079, 0097, 0189, ..." -> 9621 [label=45];
"0089, 0098, 0199, ..." -> 9711 [label=24];
"0099, 0909, 0990, ..." -> 9801 [label=6];
}
>>> 

>>> from sympy import *
>>> x = symbol('x')

Traceback (most recent call last):
  File "<pyshell#290>", line 1, in <module>
    x = symbol('x')
TypeError: 'module' object is not callable
>>> x = symbol('x')

Traceback (most recent call last):





  File "<pyshell#291>", line 1, in <module>
    x = symbol('x')
TypeError: 'module' object is not callable
>>> 
>>> 

>>> 


>>> 


>>> 


>>> 


>>> colors = 'red green red blue red green'.split()
>>> colors
['red', 'green', 'red', 'blue', 'red', 'green']
>>> colors = ['red', 'green', 'red', 'blue', 'red', 'green']
>>> 
>>> d = {}               # key: color    value: count
>>> for color in colors:
	d[color] = d[color] + 1

	

Traceback (most recent call last):
  File "<pyshell#305>", line 2, in <module>
    d[color] = d[color] + 1
KeyError: 'red'
>>> d['red']

Traceback (most recent call last):
  File "<pyshell#306>", line 1, in <module>
    d['red']
KeyError: 'red'
>>> d = {}               # key: color    value: count
>>> for color in colors:
	d[color] = d.get(color, 0) + 1

	
>>> d
{'blue': 1, 'green': 2, 'red': 3}
>>> # dict.get() is useful for counting things :-)
>>> 
>>> d
{'blue': 1, 'green': 2, 'red': 3}
>>> d.get('black', 0)
0
>>> d
{'blue': 1, 'green': 2, 'red': 3}
>>> # dict.get() is useful for counting things :-)
>>> # dict.get() unconditional lookup, it never fails, it just returns a default for missing keys
>>> # dict.get() has no side-effects, it doesn't change the dictionary
>>> 
>>> # dict.setdefault() is just like get(), but it adds missing keys to a dictionary
>>> # dict.pop() is justlike get(), but is removes existing values from the dicitonary
>>> 
>>> d = dict(raymond='red', rachel='blue', matthew='yellow')
>>> d.get('roger', 'black')
'black'
>>> d
{'matthew': 'yellow', 'rachel': 'blue', 'raymond': 'red'}
>>> d.setdefault('roger', 'black')
'black'
>>> d
{'matthew': 'yellow', 'rachel': 'blue', 'roger': 'black', 'raymond': 'red'}
>>> 
>>> d.get('matthew', 'orange')
'yellow'
>>> d
{'matthew': 'yellow', 'rachel': 'blue', 'roger': 'black', 'raymond': 'red'}
>>> d.pop('matthew', 'orange')
'yellow'
>>> d
{'rachel': 'blue', 'roger': 'black', 'raymond': 'red'}
>>> d.pop('matthew', 'orange')
'orange'
>>> d
{'rachel': 'blue', 'roger': 'black', 'raymond': 'red'}
>>> 
>>> 
>>> # setdefault() can be used for grouping
>>> 
>>> names = 'raymond rachel matthew david sue randal darwin bob martin sandy beatrice deborah mandy'.split()
>>> names
['raymond', 'rachel', 'matthew', 'david', 'sue', 'randal', 'darwin', 'bob', 'martin', 'sandy', 'beatrice', 'deborah', 'mandy']
>>> 
>>> # group the names by the first letter of the name
>>> name = names[0]
>>> name
'raymond'
>>> name[0]
'r'
>>> 
>>> d = {}
>>> for name in names:
	key = name[0]
	if key not in d:
		d[key] = []
	d[key].append(name)

	
>>> d
{'s': ['sue', 'sandy'], 'r': ['raymond', 'rachel', 'randal'], 'm': ['matthew', 'martin', 'mandy'], 'd': ['david', 'darwin', 'deborah'], 'b': ['bob', 'beatrice']}
>>> 
>>> d = {}
>>> for name in names:
	key = name[0]
	d.setdefault(key, []).append(name)

	
>>> d
{'s': ['sue', 'sandy'], 'r': ['raymond', 'rachel', 'randal'], 'm': ['matthew', 'martin', 'mandy'], 'd': ['david', 'darwin', 'deborah'], 'b': ['bob', 'beatrice']}
>>> 
>>> 
>>> name
'mandy'
>>> name[-1]
'y'
>>> # group the names by the last letter of the name
>>> d = {}
>>> for name in names:
	key = name[-1]
	d.setdefault(key, []).append(name)

	
>>> d
{'b': ['bob'], 'e': ['sue', 'beatrice'], 'd': ['raymond', 'david'], 'h': ['deborah'], 'l': ['rachel', 'randal'], 'n': ['darwin', 'martin'], 'w': ['matthew'], 'y': ['sandy', 'mandy']}
>>> 
>>> name
'mandy'
>>> len(name)
5
>>> # group the names by the length of the name
>>> d = {}
>>> for name in names:
	key = len(name)
	d.setdefault(key, []).append(name)

	
>>> d
{8: ['beatrice'], 3: ['sue', 'bob'], 5: ['david', 'sandy', 'mandy'], 6: ['rachel', 'randal', 'darwin', 'martin'], 7: ['raymond', 'matthew', 'deborah']}
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> names = 'raymond rachel matthew'.split()
>>> colors = 'red blue yellow green'.split()
>>> 
>>> colors
['red', 'blue', 'yellow', 'green']
>>> 
>>> 
>>> for i in [0, 1, 2, 3]:
	print colors[i]

	
red
blue
yellow
green
>>> range(4)
[0, 1, 2, 3]
>>> len(colors)
4
>>> 
>>> for i in range(len(colors)):
	print colors[i]

	
red
blue
yellow
green
>>> for color in colors:
	print color

	
red
blue
yellow
green
>>> 
>>> 
>>> for i in [3, 2, 1, 0]:
	print colors[i]

	
green
yellow
blue
red
>>> range(10)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> range(2, 10)
[2, 3, 4, 5, 6, 7, 8, 9]
>>> range(2, 10, 3)
[2, 5, 8]
>>> range(3, 0, -1)
[3, 2, 1]
>>> range(3, -1, -1)
[3, 2, 1, 0]
>>> 
>>> 
>>> for i in range(len(colors)-1, -1, -1):
	print colors[i]

	
green
yellow
blue
red
>>> for color in reversed(colors):
	print color

	
green
yellow
blue
red
>>> for i in range(len(colors)-1, 0, -1):
	print colors[i]

	
green
yellow
blue
>>> for i in range(len(colors)):
	print i, '-->', colors[i]

	
0 --> red
1 --> blue
2 --> yellow
3 --> green
>>> for t in enumerate(colors):
	print t

	
(0, 'red')
(1, 'blue')
(2, 'yellow')
(3, 'green')
>>> for t in enumerate(colors):
	i, color = t
	print i, '-->', color

	
0 --> red
1 --> blue
2 --> yellow
3 --> green
>>> for i, color in enumerate(colors):
	print i, '-->', color

	
0 --> red
1 --> blue
2 --> yellow
3 --> green
>>> for i in range(len(colors)):
	print i, '-->', colors[i]

	
0 --> red
1 --> blue
2 --> yellow
3 --> green
>>> for i, color in enumerate(colors):
	print i, '-->', color

	
0 --> red
1 --> blue
2 --> yellow
3 --> green
>>> for i in range(len(colors)):
	print i+1, '-->', colors[i]

	
1 --> red
2 --> blue
3 --> yellow
4 --> green
>>> for i, color in enumerate(colors, 1):
	print i, '-->', color

	
1 --> red
2 --> blue
3 --> yellow
4 --> green
>>> for i, color in enumerate(colors, 1001):
	print i, '-->', color

	
1001 --> red
1002 --> blue
1003 --> yellow
1004 --> green
>>> names
['raymond', 'rachel', 'matthew']
>>> colors
['red', 'blue', 'yellow', 'green']
>>> n = min(len(colors), len(names))
>>> n
3
>>> min(10, 5, 20)
5
>>> 
>>> 
>>> n = min(len(colors), len(names))
>>> for i in range(n):
	print names[i], '-->', colors[i]

	
raymond --> red
rachel --> blue
matthew --> yellow
>>> zip(names, colors)
[('raymond', 'red'), ('rachel', 'blue'), ('matthew', 'yellow')]
>>> zip('abcdef', range(20), colors)
[('a', 0, 'red'), ('b', 1, 'blue'), ('c', 2, 'yellow'), ('d', 3, 'green')]
>>> 
>>> 
>>> for name, color in zip(names, colors):
	print name, '-->', color

	
raymond --> red
rachel --> blue
matthew --> yellow
>>> 
>>> 


>>> 


>>> 


>>> n = min(len(colors), len(names))
>>> for i in range(n):
	print names[i], '-->', colors[i]

	
raymond --> red
rachel --> blue
matthew --> yellow
>>> for name, color in zip(names, colors):
	print name, '-->', color

	
raymond --> red
rachel --> blue
matthew --> yellow
>>> 
>>> colors
['red', 'blue', 'yellow', 'green']
>>> for color in sorted(colors):
	print color

	
blue
green
red
yellow
>>> for color in sorted(colors, reverse=True):
	print color

	
yellow
red
green
blue
>>> 
>>> 
>>> len('red')
3
>>> 
>>> for color in sorted(colors, key=len):
	print color

	
red
blue
green
yellow
>>> 
>>> 
>>> for color in set(colors):
	print color

	
blue
green
yellow
red
>>> dcolors = colors * 3
>>> 
>>> dcolors
['red', 'blue', 'yellow', 'green', 'red', 'blue', 'yellow', 'green', 'red', 'blue', 'yellow', 'green']
>>> for color in set(dcolors):
	print color

	
blue
green
yellow
red
>>> 
>>> 
>>> d = dict(raymond='red', rachel='blue', matthew='yellow')
>>> 
>>> d.keys()
['matthew', 'rachel', 'raymond']
>>> d.values()
['yellow', 'blue', 'red']
>>> d.items()
[('matthew', 'yellow'), ('rachel', 'blue'), ('raymond', 'red')]
>>> 
>>> for k, v in d.items():
	print k, '-->', v

	
matthew --> yellow
rachel --> blue
raymond --> red
>>> 
>>> 
>>> {'raymond': 'red', 'rachel': 'blue'}
{'rachel': 'blue', 'raymond': 'red'}
>>> 
>>> lot = [('raymond', 'red'), ('rachel', 'blue')]
>>> dict(lot)
{'rachel': 'blue', 'raymond': 'red'}
>>> 
>>> 
>>> names
['raymond', 'rachel', 'matthew']
>>> colors
['red', 'blue', 'yellow', 'green']
>>> 
>>> dict(zip(names, colors))
{'matthew': 'yellow', 'rachel': 'blue', 'raymond': 'red'}
>>> dict(zip(colors, names))
{'blue': 'rachel', 'yellow': 'matthew', 'red': 'raymond'}
>>> 
>>> 
>>> ict(zip(colors, names))

Traceback (most recent call last):
  File "<pyshell#516>", line 1, in <module>
    ict(zip(colors, names))
NameError: name 'ict' is not defined

>>> 
>>> 
>>> sum([10, 5, 1])
16
>>> sum(range(10))
45
>>> 
>>> 
>>> sum(range(100))
4950
>>> sum(range(1000000))
499999500000
>>> 8 * 1000000
8000000
>>> 24 * 1000000
24000000
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> # How the for-loop works
>>> # ITERATOR PROTOCOL
>>> 
>>> 
>>> # for --> foreach
>>> 
>>> s = 'cat'
>>> # String is IMMUTABLE; String is ITERABLE -- you can loop over it
>>> t1 = iter(s)
>>> t2 = iter(s)
>>> # ITERATORS have state (they know where are pointing)
>>> # ITERATORS provide values one at a time
>>> # ITERATORS tell you when they done by raising StopIteration
>>> 
>>> t1
<iterator object at 0x103726990>
>>> t2
<iterator object at 0x103726950>
>>> next(t1)
'c'
>>> next(t1)
'a'
>>> next(t2)
'c'
>>> next(t1)
't'
>>> next(t1)

Traceback (most recent call last):
  File "<pyshell#554>", line 1, in <module>
    next(t1)
StopIteration
>>> next(t2)
'a'
>>> next(t2)
't'
>>> next(t2)

Traceback (most recent call last):
  File "<pyshell#557>", line 1, in <module>
    next(t2)
StopIteration
>>> next(t2)

Traceback (most recent call last):
  File "<pyshell#558>", line 1, in <module>
    next(t2)
StopIteration

>>> 
>>> for x in s:
	print x

	
c
a
t
>>> it = iter(s)
>>> x = next(it)
>>> print x
c
>>> x = next(it)
>>> print x
a
>>> x = next(it)
>>> print x
t
>>> x = next(it)

Traceback (most recent call last):
  File "<pyshell#570>", line 1, in <module>
    x = next(it)
StopIteration
>>> t
>>> it = iter(s)
>>> x = next(it)
>>> print x
c
>>> x = next(it)
>>> print x
a
>>> x = next(it)
>>> print x
t
>>> x = next(it)
(3, 'green')

>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> sum(range(1000000))
499999500000
>>> 
>>> 
>>> # GM:   10,000  -->  Long Beach  1 raymond ; 9999 LB; 2 rachel; 9998 LB
>>> # Big inventory
>>> 
>>> # TOYOTA:  1 raymond,   2 rachel
>>> # JIT Manufacturing
>>> 
>>> r = range(4)
>>> r
[0, 1, 2, 3]
>>> it = iter(r)
>>> it
<listiterator object at 0x103726890>
>>> next(it)
0
>>> next(it)
1
>>> next(it)
2
>>> next(it)
3
>>> next(it)

Traceback (most recent call last):
  File "<pyshell#595>", line 1, in <module>
    next(it)
StopIteration
>>> 
>>> 
>>> r = xrange(4)
>>> r
xrange(4)
>>> it = iter(r)
>>> it
<rangeiterator object at 0x10370bc90>
>>> next(it)
0
>>> next(it)
1
>>> next(it)
2
>>> next(it)
3
>>> next(it)

Traceback (most recent call last):
  File "<pyshell#606>", line 1, in <module>
    next(it)
StopIteration
>>> for i in xrange(10):
	print i, i*i

	
0 0
1 1
2 4
3 9
4 16
5 25
6 36
7 49
8 64
9 81
>>> sum(range(1000000))
499999500000
>>> sum(xrange(1000000))
499999500000
>>> 
>>> 
>>> range(10)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> xrange(10)
xrange(10)
>>> zip(names, colors)
[('raymond', 'red'), ('rachel', 'blue'), ('matthew', 'yellow')]
>>> 
>>> 
>>> from itertools import izip
>>> izip(names, colors)
<itertools.izip object at 0x103734a70>
>>> it = izip(names, colors)
>>> next(it)
('raymond', 'red')
>>> next(it)
('rachel', 'blue')
>>> next(it)
('matthew', 'yellow')
>>> 
>>> 
>>> for name, color in izip(names, colors):
	print name, '-->', color

	
raymond --> red
rachel --> blue
matthew --> yellow
>>> enumerate(colors)
<enumerate object at 0x103729370>
>>> it = enumerate(colors)
>>> next(it)
(0, 'red')
>>> next(it)
(1, 'blue')
>>> next(it)
(2, 'yellow')
>>> next(it)
(3, 'green')
>>> 
>>> list('cat')
['c', 'a', 't']
>>> list(izip(names, colors))
[('raymond', 'red'), ('rachel', 'blue'), ('matthew', 'yellow')]
>>> list(enumerate(colors))
[(0, 'red'), (1, 'blue'), (2, 'yellow'), (3, 'green')]
>>> reversed(colors)
<listreverseiterator object at 0x10370c810>
>>> it = reversed(colors)
>>> next(it)
'green'
>>> next(it)
'yellow'
>>> next(it)
'blue'
>>> next(it)
'red'
>>> "Be all you can be."
'Be all you can be.'

>>> list(reversed(colors))
['green', 'yellow', 'blue', 'red']
>>> sorted(colors)
['blue', 'green', 'red', 'yellow']
>>> set(colors)
set(['blue', 'green', 'yellow', 'red'])
>>> d.items()
[('matthew', 'yellow'), ('rachel', 'blue'), ('raymond', 'red')]
>>> 
>>> 
>>> it = iter(d.iteritems())
>>> it
<dictionary-itemiterator object at 0x103728470>
>>> next(it)
('matthew', 'yellow')
>>> next(it)
('rachel', 'blue')
>>> next(it)
('raymond', 'red')
>>> 
>>> d.items()
[('matthew', 'yellow'), ('rachel', 'blue'), ('raymond', 'red')]
>>> dict(d.items())
{'matthew': 'yellow', 'rachel': 'blue', 'raymond': 'red'}
>>> dict(d.iteritems())
{'matthew': 'yellow', 'rachel': 'blue', 'raymond': 'red'}
>>> 
>>> 
>>> 
>>> 
>>> f = open('notes/stocks.txt')
>>> f.readlines()
['CSCO,100,18.04\n', 'WLP,200,45.03\n', 'CSCO,150,19.05\n', 'MSFT,250,80.56\n', 'IBM,500,22.01\n', 'WLP,250,44.23\n', 'GOOG,200,501.45\n', 'CSCO,175,19.56\n', 'MSFT,75,80.81\n', 'GOOG,300,502.65\n', 'IBM,150,25.01\n']
>>> f = open('notes/stocks.txt')
>>> it = iter(f)
>>> next(it)
'CSCO,100,18.04\n'
>>> next(it)
'WLP,200,45.03\n'
>>> next(it)
'CSCO,150,19.05\n'
>>> 
>>> for line in open('notes/stocks.txt'):
	print line.rstrip()

	
CSCO,100,18.04
WLP,200,45.03
CSCO,150,19.05
MSFT,250,80.56
IBM,500,22.01
WLP,250,44.23
GOOG,200,501.45
CSCO,175,19.56
MSFT,75,80.81
GOOG,300,502.65
IBM,150,25.01
>>> 
>>> 
>>> 
>>> with open('notes/stocks.txt') as f:
	for line in f:
		print line.rstrip()

		
CSCO,100,18.04
WLP,200,45.03
CSCO,150,19.05
MSFT,250,80.56
IBM,500,22.01
WLP,250,44.23
GOOG,200,501.45
CSCO,175,19.56
MSFT,75,80.81
GOOG,300,502.65
IBM,150,25.01
>>> ================================ RESTART ================================
>>> 
0
1
2
3
4
5
6
7
8
9
0
1
2
3
4
5
6
7
8
9
Raymond
Rachel
Matthew
0 Raymond
1 Rachel
2 Matthew
raymond --> red
rachel --> blue
matthew --> yellow
raymond --> red
rachel --> blue
matthew --> yellow
matthew
rachel
raymond
matthew
rachel
raymond
rachel
raymond
matthew
raymond
rachel
matthew
matthew
rachel
raymond
matthew --> yellow
rachel --> blue
raymond --> red

GM               Toyota
---              ------
Inventory        JIT Manufacturing
---              --------------
list approach    iterator approach
-------------    -----------
range()          xrange()
zip()            izip()
 --              enumerate()
 --              reversed()
sorted()
set()

d.keys()         d
d.values()       d.itervalues()
d.items()        d.iteritems()

f.readlines()    f


>>> 
>>> 
>>> 
>>> 
>>> # Wall Street  |   It's Full of Stars  |  Atoms and Order
>>> 
>>> def mypow(base, exp):
	return base ** exp

>>> mypow(2, 5)                 # positional arguments
32
>>> mypow(exp=5, base=2)        # keyword arguments
32
>>> mypow(2, exp=5)             # hybrid -- positional go first and then the keywords
32
>>> 
>>> 
>>> t = 2, 5
>>> type(t)
<type 'tuple'>
>>> len(2)

Traceback (most recent call last):
  File "<pyshell#700>", line 1, in <module>
    len(2)
TypeError: object of type 'int' has no len()
>>> len(t)
2
>>> t[0]
2
>>> t[1]
5
>>> 
>>> def mypow(base, exp):
	return base ** exp
t = 2, 5
SyntaxError: invalid syntax
>>> 
>>> 
>>> 


>>> 


>>> 
>>> def mypow(base, exp):
	return base ** exp

>>> t = 2, 5
>>> 
>>> mypow(t)

Traceback (most recent call last):
  File "<pyshell#716>", line 1, in <module>
    mypow(t)
TypeError: mypow() takes exactly 2 arguments (1 given)
>>> mypow(t[0], t[1])
32
>>> 
>>> mypow(*t)         # unpacks the tuple into separate positional arguments
32
>>> 
>>> # One star in a function CALL will UNPACK any ITERABLE into separate POSITIONAL arguments
>>> 
>>> s = [2, 5]
>>> mypow(*s)
32
>>> 
>>> # This problems arises whenever
>>> # 1) functions with multiple arguments
>>> # 2) containers that hold data
>>> 
>>> 
>>> def f(x, y):
	return x + y

>>> f(4, 6)
10
>>> f(4, 6, 5)

Traceback (most recent call last):
  File "<pyshell#735>", line 1, in <module>
    f(4, 6, 5)
TypeError: f() takes exactly 2 arguments (3 given)
>>> def f(x, y, z=0):
	return x + y + z

>>> f(4, 6)
10
>>> f(4, 6, 5)
15
>>> f(4, 6, 5, 7)

Traceback (most recent call last):
  File "<pyshell#740>", line 1, in <module>
    f(4, 6, 5, 7)
TypeError: f() takes at most 3 arguments (4 given)
>>> def f(x, y, z=0, a=0):
	return x + y + z + a

>>> f(4, 6, 5, 7)
22
>>> 
>>> # The problem is called "variable length argument lists"
>>> 
>>> def f(a, b, *t):
	print a
	print b
	print t

	
>>> f(10, 20, 30, 40, 50, 60)
10
20
(30, 40, 50, 60)
>>> # One star in a function CALL will UNPACK any ITERABLE into separate POSITIONAL arguments
>>> # One star in a function DEFINITION will PACK any separate POSITIONAL arguments into a TUPLE
>>> 
>>> 
>>> d = {'exp': 5, 'base': 2}
>>> 
>>> mypow(exp=d['exp'], base=d['base'])
32
>>> mypow(**d)
32
>>> 
>>> # One star in a function CALL will UNPACK any ITERABLE into separate POSITIONAL arguments
>>> # Two stars in a function CALL will UNPACK a DICTIONARY into KEYWORD arguments
>>> 
>>> 
>>> def f(a, b, *t, **d):
	print a
	print b
	print t
	print d

	
>>> f(10, 20, 30, 40, 50, x=1, y=2, z=3)
10
20
(30, 40, 50)
{'y': 2, 'x': 1, 'z': 3}
>>> 
>>> 
>>> # One star in a function CALL will UNPACK any ITERABLE into separate POSITIONAL arguments
>>> # Two stars in a function CALL will UNPACK a DICTIONARY into KEYWORD arguments
>>> 
>>> # One star in a function DEFINITION will PACK any separate POSITIONAL arguments into a TUPLE
>>> # Two stars in a function DEFINITION will PACK all KEYWORDS arguments into a DICTIONARY
>>> 
>>> 
>>> def logging_mypow(*args, **kwds):
	print 'mypow called with', args, 'and', kwds
	r = mypow(*args, **kwds)
	print 'the answer is', r
	return r

>>> 
>>> logging_mypow(2, 5)
mypow called with (2, 5) and {}
the answer is 32
32
>>> 
>>> logging_mypow(exp=5, base=2)
mypow called with () and {'base': 2, 'exp': 5}
the answer is 32
32
>>> 
>>> logging_mypow(2, exp=5)
mypow called with (2,) and {'exp': 5}
the answer is 32
32
>>> 
>>> 
>>> 
>>> x = 10
>>> y = 20
>>> 
>>> t = x
>>> x = y
>>> y = t
>>> 
>>> x
20
>>> y
10
>>> s = '1.234.567,89'
>>> s.replace(',', '.')
'1.234.567.89'
>>> s.replace('.', ',')
'1,234,567,89'
>>> 
>>> s.replace(',', '!').replace('.', ',').replace('!', '.')
'1,234,567.89'
>>> 
>>> t = 10, 20
>>> type(t)
<type 'tuple'>
>>> a, b = t
>>> a
10
>>> b
20
>>> x
20
>>> y
10
>>> 
>>> 
>>> x, y = y, x
>>> 
>>> x
10
>>> y
20
>>> y, x = x, y
>>> F = m1 * m2 * G / d**2

Traceback (most recent call last):
  File "<pyshell#823>", line 1, in <module>
    F = m1 * m2 * G / d**2
NameError: name 'm1' is not defined
>>> # JPL
>>> 
>>> 
>>> 
>>> a, b = 0, 1
>>> 
>>> 
>>> a = 0
>>> b = 1
>>> 
>>> 
>>> a, b = 0, 1
>>> a, b = b, a+b
>>> a
1
>>> b
1
>>> a, b = b, a+b
>>> a
1
>>> a, b = b, a+b
>>> a
2
>>> a, b = b, a+b
>>> a
3
>>> a, b = b, a+b
>>> a
5
>>> a, b = b, a+b
>>> a
8
>>> a, b = b, a+b
>>> a
13
>>> a, b = b, a+b
>>> a
21
>>> def fibo(n):
	a, b = 0, 1
	for i in xrange(n):
		a, b = b, a+b
	return a

>>> for i in range(20):
	print fibo(i)

	
0
1
1
2
3
5
8
13
21
34
55
89
144
233
377
610
987
1597
2584
4181
>>> # ...    va_args   va_start   va_end
>>> 
>>> def f(*args):
	pass

>>> 
